{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/phac-nml/mikrokondo/main/nextflow_schema.json",
    "title": "phac-nml/mikrokondo pipeline parameters",
    "description": "Mikrokondo beta",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": [
                "input",
                "outdir",
                "platform"
            ],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "schema": "assets/schema_input.json",
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a file with information about the samples in your experiment before running the pipeline.",
                    "fa_icon": "fas fa-file-csv"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open",
                    "hidden": true,
                    "pattern": "^\\S+$"
                },
                "platform": {
                    "type": "string",
                    "default": "illumina",
                    "enum": [
                        "illumina",
                        "nanopore",
                        "pacbio",
                        "hybrid"
                    ],
                    "description": "Sequencing platform used"
                },
                "long_read_opt": {
                    "type": "string",
                    "default": "nanopore",
                    "description": "Specify which longread platform your data is from (nanopore or pacbio). This option must be specified if performing a hybrid assembly.",
                    "enum": [
                        "nanopore",
                        "pacbio"
                    ]
                },
                "metagenomic_run": {
                    "type": "boolean",
                    "description": "Label all samples as metagenomic (Skip autodetection)"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "hidden": true
                }
            }
        },
        "databases_and_pre_computed_files": {
            "title": "Databases and Pre-Computed Files",
            "type": "object",
            "default": "",
            "properties": {
                "dehosting_idx": {
                    "type": "string",
                    "description": "Minimap2 index for dehosting and kitome removal",
                    "pattern": "^\\S+$",
                    "exists": true,
                    "format": "file-path"
                },
                "mash_sketch": {
                    "type": "string",
                    "description": "Mash sketch used for contamination detection and speciation (Sketch comments must be a taxonomic string similar to what Kraken2 outputs)",
                    "pattern": "^\\S+$",
                    "exists": true,
                    "format": "file-path"
                },
                "kraken2_db": {
                    "type": "string",
                    "description": "Kraken2 database",
                    "pattern": "^\\S+$",
                    "exists": true,
                    "format": "directory-path"
                },
                "bakta_db": {
                    "type": "string",
                    "description": "Database use for bakta, this value is optional as bakta can be skipped",
                    "pattern": "^\\S+$",
                    "exists": true,
                    "format": "directory-path",
                    "hidden": true
                },
                "staramr_db": {
                    "type": "string",
                    "description": "It is recommended to use the StarAMR database in the StarAMR container however, an external option can be specified",
                    "pattern": "^\\S+$",
                    "exists": true,
                    "format": "directory-path",
                    "hidden": true
                }
            },
            "required": [
                "dehosting_idx",
                "mash_sketch",
                "kraken2_db"
            ],
            "description": "The location of databases used by mikrokondo"
        },
        "allele_schema_options": {
            "title": "Allele Schema Options",
            "type": "object",
            "description": "Specify an allele calling schema.",
            "default": "",
            "properties": {
                "lx_allele_database": {
                    "type": "string",
                    "description": "The path to a folder containing a collection of locidex databases to allow for automatic allele database selection. The folder should contain a 'manifest.json' file created by locidex. If you wish to force a certain allele scheme to be used you can specify an option for the `override_allele_scheme` argument which will perform allele calling with the specified scheme.",
                    "pattern": "^\\S+$",
                    "exists": true,
                    "format": "directory-path"
                },
                "override_allele_scheme": {
                    "type": "string",
                    "description": "Specify the path to an allele calling schema to be used. This schema will be used for allele calling of all samples.",
                    "exists": true,
                    "pattern": "^\\S*$",
                    "format": "directory-path",
                    "default": "",
                    "help_text": ""
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested for any single job.",
                    "default": 16,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`",
                    "minimum": 1
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "2000.GB",
                    "fa_icon": "fas fa-memory",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "240.h",
                    "fa_icon": "far fa-clock",
                    "pattern": "^(\\d+\\.?\\s*(s|m|h|d|day)\\s*)+$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": [
                        "symlink",
                        "rellink",
                        "link",
                        "copy",
                        "copyNoFollow",
                        "move"
                    ],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "validationShowHiddenParams": {
                    "type": "boolean",
                    "fa_icon": "far fa-eye-slash",
                    "description": "Show all params when using `--help`",
                    "hidden": true,
                    "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
                },
                "validationFailUnrecognisedParams": {
                    "type": "boolean",
                    "fa_icon": "far fa-check-circle",
                    "description": "Validation of parameters fails when an unrecognised parameter is found.",
                    "hidden": true,
                    "help_text": "By default, when an unrecognised parameter is found, it returns a warning."
                },
                "show_hidden_params": {
                    "type": "boolean",
                    "hidden": true,
                    "description": "Show hidden parameters."
                },
                "tracedir": {
                    "type": "string",
                    "default": "null/pipeline_info",
                    "hidden": true,
                    "description": "Trace directory."
                },
                "stage_in_mode": {
                    "type": "string",
                    "default": "symlink",
                    "hidden": true,
                    "description": "Mode for staging files."
                },
                "slurm_p": {
                    "type": "boolean",
                    "hidden": true,
                    "description": "Enable running with slurm."
                },
                "slurm_profile": {
                    "type": "string",
                    "hidden": true,
                    "description": "Profile used for slurm."
                },
                "validationS3PathCheck": {
                    "type": "boolean",
                    "default": true,
                    "hidden": true,
                    "description": "Whether or not to validate S3 paths."
                },
                "output_idx_name": {
                    "type": "string",
                    "hidden": true,
                    "description": "Index creation output file name"
                }
            }
        },
        "control_flow_options": {
            "title": "Control flow options",
            "type": "object",
            "description": "Options to alter control flow of the pipeline",
            "default": "",
            "properties": {
                "run_kraken": {
                    "type": "boolean",
                    "description": "Use Kraken2 instead of Mash for sample speciation (Useful if you have Eukaryotic data or Archae)"
                },
                "hybrid_unicycler": {
                    "type": "boolean",
                    "description": "Use unicycler for hybrid assembly."
                },
                "skip_report": {
                    "type": "boolean",
                    "description": "Skip summary report generation"
                },
                "skip_raw_read_metrics": {
                    "type": "boolean",
                    "description": "Skip generating raw-read metrics. e.g. when data first enters the pipeline"
                },
                "skip_version_gathering": {
                    "type": "boolean",
                    "description": "Skip creating a report of the final versions of tools used in mikrokondo"
                },
                "skip_subtyping": {
                    "type": "boolean",
                    "description": "Do not enter the subtyping workflow, e.g. ECTyper, SISTR etc will not be ran."
                },
                "skip_bakta": {
                    "type": "boolean",
                    "default": true,
                    "description": "Skip annotation with Bakta",
                    "hidden": true
                },
                "skip_abricate": {
                    "type": "boolean",
                    "description": "Skip running abricate for annotation"
                },
                "skip_checkm": {
                    "type": "boolean",
                    "description": "Skip running CheckM"
                },
                "skip_depth_sampling": {
                    "type": "boolean",
                    "description": "Skip down sampling of data to a target depth. This is not supported for metagenomic samples or hybrid assemblies."
                },
                "skip_ont_header_cleaning": {
                    "type": "boolean",
                    "default": true,
                    "description": "Make nanopore headers unique. Only turn this on if you are worried about duplicate id's e.g. from errors in running sequencing"
                },
                "skip_polishing": {
                    "type": "boolean",
                    "description": "Skip polishing of assemblies, useful in case of errors or for metagenomic samples that fail."
                },
                "skip_species_classification": {
                    "type": "boolean",
                    "description": "Skip determining what your species is (with Kraken2 or Mash)"
                },
                "skip_mlst": {
                    "type": "boolean",
                    "description": "Skip classic 7 gene MLST (Uses Torsten Seemann's mlst)"
                },
                "skip_mobrecon": {
                    "type": "boolean",
                    "description": "Skip running mob recon for plasmid identification."
                },
                "skip_metagenomic_detection": {
                    "type": "boolean",
                    "description": "Skip metagenomic detection. (Forces samples to be analyzed as if they were isolates)"
                },
                "skip_staramr": {
                    "type": "boolean",
                    "description": "Skip running StarAMR"
                },
                "skip_allele_calling": {
                    "type": "boolean",
                    "description": "Skip allele calling with Locidex"
                },
                "skip_length_filtering_contigs": {
                    "type": "boolean",
                    "description": "Skip filtering contigs by length."
                }
            }
        },
        "ectyper": {
            "title": "ECTyper",
            "type": "object",
            "description": "Options for ECTyper (E.coli serotyping)",
            "default": "",
            "properties": {
                "ec_opid": {
                    "type": "integer",
                    "default": 90,
                    "description": "Minimum percent identity to determine O antigens presence",
                    "minimum": 0,
                    "maximum": 100
                },
                "ec_opcov": {
                    "type": "integer",
                    "default": 90,
                    "description": "Minimum percent coverage of O antigen",
                    "minimum": 0,
                    "maximum": 100
                },
                "ec_hpid": {
                    "type": "integer",
                    "default": 95,
                    "description": "Miniumum percent identity to determine H antigens presence",
                    "minimum": 0,
                    "maximum": 100
                },
                "ec_hpcov": {
                    "type": "integer",
                    "default": 50,
                    "description": "Minimum percent coverage of H antigen",
                    "minimum": 0,
                    "maximum": 100
                },
                "ec_enable_verification": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable species verification in ECTyper"
                }
            }
        },
        "sistr": {
            "title": "SISTR",
            "type": "object",
            "description": "Options for SISTR (Salmonella serotyping)",
            "default": "",
            "properties": {
                "sr_full_cgmlst": {
                    "type": "boolean",
                    "default": true,
                    "description": "Run SISTR using the full set of cgMLST alleles which can include highly similar alleles."
                }
            }
        },
        "fastp_options": {
            "title": "Fastp options",
            "type": "object",
            "description": "Options to pass to FastP for read QA/QC",
            "default": "",
            "properties": {
                "fp_average_quality": {
                    "type": "integer",
                    "default": 25,
                    "description": "Average quality of a read to be included (read pair is discarded if it is below this value)",
                    "minimum": 0
                },
                "fp_cut_tail_mean_quality": {
                    "type": "integer",
                    "default": 15,
                    "minimum": 1,
                    "description": "The mean quality requirement option shared by cut_front, cut_tail or cut_sliding",
                    "maximum": 36
                },
                "fp_cut_tail_window_size": {
                    "type": "integer",
                    "default": 4,
                    "minimum": 1,
                    "description": "The window size option shared by cut_front, cut_tail or cut_sliding.",
                    "maximum": 1000
                },
                "fp_complexity_threshold": {
                    "type": "integer",
                    "default": 20,
                    "minimum": 0,
                    "description": "The threshold for low complexity filter",
                    "maximum": 100
                },
                "fp_qualified_phred": {
                    "type": "integer",
                    "default": 15,
                    "minimum": 0,
                    "description": "The quality value that a base is qualified."
                },
                "fp_unqualified_percent_limit": {
                    "type": "integer",
                    "default": 40,
                    "minimum": 0,
                    "maximum": 100,
                    "description": "The percentage of bases that are allowed to be unqualified"
                },
                "fp_polyg_min_len": {
                    "type": "integer",
                    "default": 10,
                    "minimum": 1,
                    "description": "The minimum length to detect polyG in the read tail"
                },
                "fp_polyx_min_len": {
                    "type": "integer",
                    "default": 10,
                    "description": "The minimum length to detect polyX in the read tail",
                    "minimum": 1
                },
                "fp_illumina_length_min": {
                    "type": "integer",
                    "default": 35,
                    "minimum": 0,
                    "description": "Reads shorter than length_required will be discarded"
                },
                "fp_illumina_length_max": {
                    "type": "integer",
                    "default": 400,
                    "minimum": 0,
                    "description": "Reads longer than length_limit will be discarded, 0 means no limitation."
                },
                "fp_single_end_length_min": {
                    "type": "integer",
                    "default": 1000,
                    "minimum": 0,
                    "description": "Same as fp_illumina_length_min but for single-end data. reads shorter than length_required will be discarded"
                },
                "fp_dedup_reads": {
                    "type": "boolean",
                    "description": "Enable deduplication to drop the duplicated reads/pairs"
                }
            }
        },
        "locidex": {
            "title": "Locidex",
            "type": "object",
            "description": "Options for allele calling with locidex.",
            "default": "",
            "properties": {
                "lx_min_evalue": {
                    "type": "number",
                    "default": 0.0001,
                    "description": "Minimum e-value required for match.",
                    "minimum": 0,
                    "maximum": 100
                },
                "lx_min_dna_len": {
                    "type": "integer",
                    "default": 1,
                    "description": "Global minimum query length of DNA strand.",
                    "minimum": 1
                },
                "lx_min_aa_len": {
                    "type": "integer",
                    "default": 1,
                    "description": "Global minimum query length of an Amino Acid strand.",
                    "minimum": 1
                },
                "lx_max_dna_len": {
                    "type": "integer",
                    "default": 10000000,
                    "description": "Global maximum query length of DNA strand.",
                    "minimum": 10
                },
                "lx_max_aa_len": {
                    "type": "integer",
                    "default": 10000000,
                    "description": "Global maximum query length of Amino Acid strand.",
                    "minimum": 10
                },
                "lx_min_dna_ident": {
                    "type": "number",
                    "default": 80,
                    "description": "Global minimum DNA percent identity required for match. (float).",
                    "minimum": 0,
                    "maximum": 100
                },
                "lx_min_aa_ident": {
                    "type": "number",
                    "default": 80,
                    "description": "Global minimum Amino Acid percent identiy required for match. (float)",
                    "minimum": 0,
                    "maximum": 100
                },
                "lx_min_dna_match_cov": {
                    "type": "number",
                    "default": 80,
                    "description": "Global minimum DNA percent hit coverage identity required for match. (float)",
                    "minimum": 0.001,
                    "maximum": 100
                },
                "lx_min_aa_match_cov": {
                    "type": "number",
                    "default": 80,
                    "description": "Global minimum Amino Acid hit coverage identity required for match. (float)",
                    "minimum": 0,
                    "maximum": 100
                },
                "lx_max_target_seqs": {
                    "type": "integer",
                    "default": 10,
                    "description": "Maximum number of sequence hits per query",
                    "minimum": 1
                },
                "lx_extraction_mode": {
                    "type": "string",
                    "default": "raw",
                    "description": "Different ways to run locidex.",
                    "enum": [
                        "snps",
                        "trim",
                        "raw",
                        "extend"
                    ]
                },
                "lx_report_mode": {
                    "type": "string",
                    "default": "normal",
                    "description": "Allele profile assignment.",
                    "enum": [
                        "normal",
                        "conservative"
                    ]
                },
                "lx_report_prop": {
                    "type": "string",
                    "default": "locus_name",
                    "description": "Metadata label to use for aggregation. Only alphanumeric characters, underscores and dashes are allowed in names.",
                    "pattern": "^[A-Za-z0-9_-]*$"
                },
                "lx_report_max_ambig": {
                    "type": "integer",
                    "default": 0,
                    "description": "Maximum number of ambiguous characters allowed in a sequence.",
                    "minimum": 0
                },
                "lx_report_max_stop": {
                    "type": "integer",
                    "default": 0,
                    "description": "Maximum number of internal stop codons allowed in a sequence.",
                    "minimum": 0
                }
            }
        },
        "data_processing_thresholds": {
            "title": "Data processing thresholds",
            "type": "object",
            "description": "Thresholds for processing or qa/qc of data",
            "default": "",
            "properties": {
                "target_depth": {
                    "type": "integer",
                    "default": 100,
                    "description": "Target depth to sub-sample reads to",
                    "minimum": 1
                },
                "min_reads": {
                    "type": "integer",
                    "default": 1000,
                    "description": "Minimum number of reads a sample requires to move forward for assembly",
                    "minimum": 1
                },
                "ba_min_contig_length": {
                    "type": "integer",
                    "default": 200,
                    "description": "Minimum contig length for processing in Bakta",
                    "minimum": 1
                },
                "qt_min_contig_length": {
                    "type": "integer",
                    "default": 1000,
                    "description": "Minimum contig length for quast",
                    "minimum": 1
                },
                "mh_min_kmer": {
                    "type": "integer",
                    "default": 10,
                    "description": "Minimum Kmer count needed for a unique kmer to be used in genome size estimation",
                    "minimum": 1
                }
            }
        },
        "other": {
            "title": "Other",
            "type": "object",
            "description": "Other parameters",
            "default": "",
            "properties": {
                "nanopore_chemistry": {
                    "type": "string",
                    "description": "The guppy base calling model. See the docs for a link of valid options",
                    "pattern": "^[A-Za-z0-9_-]*$"
                },
                "flye_read_type": {
                    "type": "string",
                    "default": "hq",
                    "description": "Read type for flye to use. hq corresponds to hifi for Pacbio data.",
                    "enum": [
                        "hq",
                        "corr",
                        "raw"
                    ]
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/databases_and_pre_computed_files"
        },
        {
            "$ref": "#/definitions/allele_schema_options"
        },
        {
            "$ref": "#/definitions/institutional_config_options"
        },
        {
            "$ref": "#/definitions/max_job_request_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        },
        {
            "$ref": "#/definitions/control_flow_options"
        },
        {
            "$ref": "#/definitions/ectyper"
        },
        {
            "$ref": "#/definitions/sistr"
        },
        {
            "$ref": "#/definitions/fastp_options"
        },
        {
            "$ref": "#/definitions/locidex"
        },
        {
            "$ref": "#/definitions/data_processing_thresholds"
        },
        {
            "$ref": "#/definitions/other"
        }
    ]
}
