nextflow_process {
    name "Test Process LOCIDEX_SELECT"
    script "modules/local/locidex_select.nf"
    process "LOCIDEX_SELECT"
    tag "modules"
    tag "locidex_select"

    test("Test failed due to missing date") {
        tag "test_missing_date"
        when {
            process {
                """
                input[0] = Channel.of(
                    [["id": "Bad Date"], 'Bad Date', file("$baseDir/tests/data/fake_contigs/vibrio_cholerea/st_120.fa")]
                )

                input[1] = Channel.of(
                    file("${projectDir}/tests/data/databases/locidex_dbs/manifest.json")
                )
                """
            }

            params {
                outdir = "locidex_select"
                lx_allele_database = "${projectDir}/tests/data/databases/locidex_dbs"
            }
        }

        then {
            assert process.failed
            assert process.errorReport.contains("Missing date created value for locidex database entry: Bad Date")
        }
    }


    test("Test parsing failed due to missing path"){
        when {
            process {
                """
                input[0] = Channel.of(
                    [['id': 'Bad Path'], 'Bad Path', file("$baseDir/tests/data/fake_contigs/vibrio_cholerea/st_120.fa")]
                )

                input[1] = Channel.of(
                    file("${projectDir}/tests/data/databases/locidex_dbs/manifest.json")
                )
                """
            }

            params {
                outdir = "locidex_select"
                lx_allele_database = "${projectDir}/tests/data/databases/locidex_dbs"
            }
        }

        then {
            assert process.failed
            assert process.errorReport.contains("Missing path value in locidex config for: Bad Path")
        }

    }
    test("Test parsing failed due incorrect date format"){
        tag "fail_bad_date_format"
        when {
            process {
                """
                input[0] = Channel.of(
                    [["id": "Bad Date Format"], 'Bad Date Format', file("$baseDir/tests/data/fake_contigs/vibrio_cholerea/st_120.fa")]
                )

                input[1] = Channel.of(
                    file("${projectDir}/tests/data/databases/locidex_dbs/manifest.json")
                )
                """
            }


            params {
                outdir = "locidex_select"
                lx_allele_database = "${projectDir}/tests/data/databases/locidex_dbs"
            }

        }

        then {
            assert process.failed
            assert process.errorReport.contains("Date value 2024/02/25 does not meet format string required of yyyy-MM-dd")
        }
    }

    test("Test parsing failed due to missing database name"){
        when {
            process {
                """
                input[0] = Channel.of(
                    [["id": "Bad Name"], 'Bad Name', file("$baseDir/tests/data/fake_contigs/vibrio_cholerea/st_120.fa")]
                )

                input[1] = Channel.of(
                    file("${projectDir}/tests/data/databases/locidex_dbs/manifest.json")
                )
                """
            }


            params {
                outdir = "locidex_select"
                lx_allele_database = "${projectDir}/tests/data/databases/locidex_dbs"
            }

        }

        then {
            assert process.failed
            assert process.errorReport.contains("Missing name value in locidex config for: Bad Name")
        }
    }


    test("Test parsing failed due to missing database config"){
        tag "test_fail_config_missing"
        when {
            process {
                """
                input[0] = Channel.of(
                    [["id": "No Config"], 'No Config', file("$baseDir/tests/data/fake_contigs/vibrio_cholerea/st_120.fa")]
                )

                input[1] = Channel.of(
                    file("${projectDir}/tests/data/databases/locidex_dbs/manifest.json")
                )
                """
            }


            params {
                outdir = "locidex_select"
                lx_allele_database = "${projectDir}/tests/data/databases/locidex_dbs"
            }

        }

        then {
            assert process.failed
            assert process.errorReport.contains("Missing config data for locidex database entry: No Config")
        }
    }

    test("Test multiple versions of same database"){
        when {
            process {
                """
                input[0] = Channel.of(
                    [["id": "Too Many Entries with Same Date"], 'Too Many Entries with Same Date', file("$baseDir/tests/data/fake_contigs/vibrio_cholerea/st_120.fa")]
                )

                input[1] = Channel.of(
                    file("${projectDir}/tests/data/databases/locidex_dbs/manifest.json")
                )
                """
            }


            params {
                outdir = "locidex_select"
                lx_allele_database = "${projectDir}/tests/data/databases/locidex_dbs"
            }

        }

        then {
            assert process.failed
            assert process.errorReport.contains("There are multiple versions of the most recent database for Too Many Entries With Same Date.")
        }
    }

    test("Test database is too old"){
        when {
            process {
                """
                input[0] = Channel.of(
                    [["id": "Oldest Database"], 'Oldest Database', file("$baseDir/tests/data/fake_contigs/vibrio_cholerea/st_120.fa")]
                )

                input[1] = Channel.of(
                    file("${projectDir}/tests/data/databases/locidex_dbs/manifest.json")
                )
                """
            }


            params {
                outdir = "locidex_select"
                lx_allele_database = "${projectDir}/tests/data/databases/locidex_dbs"
            }

        }

        then {
            assert process.failed
            assert process.errorReport.contains("Please set the allele database parameter, or adjust the date your database was created in the 'config.json'")
        }
    }

        test("Test no database"){
        when {
            process {
                """
                input[0] = Channel.of(
                    [["id": "Test"], 'Test', file("$baseDir/tests/data/fake_contigs/vibrio_cholerea/st_120.fa")]
                )

                input[1] = Channel.of(
                    file("${projectDir}/tests/data/databases/locidex_dbs/manifest.json")
                )
                """
            }


            params {
                outdir = "locidex_select"
                lx_allele_database = null
                allele_scheme = null
            }

        }

        then {
            assert process.failed
            assert process.errorReport.contains("Allele calling is enabled but there is no allele scheme or locidex allele database location present.")
        }
    }


    test("Test no database"){
        when {
            process {
                """
                input[0] = Channel.of(
                    [["id": "Vibrio cholerae"], 'Vibrio cholerae', file("$baseDir/tests/data/fake_contigs/vibrio_cholerea/st_120.fa")]
                )

                input[1] = Channel.of(
                    file("${projectDir}/tests/data/databases/locidex_dbs/manifest.json")
                )
                """
            }


            params {
                outdir = "locidex_select"
                lx_allele_database = file("${projectDir}/tests/data/databases/locidex_dbs/manifest.json")
            }

        }

        then {
            assert process.success
            assert process.out[0]
        }
    }
}
