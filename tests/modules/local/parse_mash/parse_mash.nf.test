nextflow_process {
    name "Test Process PARSE_MASH"
    script "modules/local/parse_mash.nf"
    process "PARSE_MASH"
    tag "modules"
    tag "parse_mash"


    test("Test equivalent taxa works"){
        tag "test_equivalent_taxa"
        when{
            process{
                """
                    input[0] = Channel.of(
                        [["id": "ECSH"], file("$baseDir/tests/data/test_equivalent_taxa.screen")]
                    )
                    input[1] = Channel.of(file("$baseDir/conf/equivalent_taxa.json"))

                    input[2] = channel.of("classify")
                """
            }

            params {
                outdir = "mash_parse_classify"
            }

            then {
                assert process.success
                assert process.out.mash_out[0][1] == 'false'
            }
        }
    }


    test("Test sample is isolate"){
        tag "test_sample_isolate"
        when{
            process{
                """
                    input[0] = Channel.of(
                        [["id": "iso"], file("$baseDir/tests/data/isolate_mash.screen")]
                    )
                    input[1] = Channel.of(file("$baseDir/conf/equivalent_taxa.json"))

                    input[2] = channel.of("classify")
                """
            }

            params {
                outdir = "mash_parse_classify"
            }

            then {
                assert process.success
                assert process.out.mash_out[0][1] == 'false'
            }
        }
    }

    test("Test sample is metagenomic"){
        tag "test_sample_metagenomic"
        when{
            process{
                """
                    input[0] = Channel.of(
                        [["id": "iso"], file("$baseDir/tests/data/contaminated_mash.screen")]
                    )
                    input[1] = Channel.of(file("$baseDir/conf/equivalent_taxa.json"))

                    input[2] = channel.of("classify")
                """
            }

            params {
                outdir = "mash_parse_classify"
            }

            then {
                assert process.success
                assert process.out.mash_out[0][1] == 'true'
            }
        }
    }
}
