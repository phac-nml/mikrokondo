nextflow_pipeline {

    name "Integration Tests from assemblies for MIKROKONDO"
    script "main.nf"

    test("Test starting from assemblies") {
        tag "from_assemblies"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-test-from-assemblies.csv"
                outdir = "results"

                platform = "illumina"

                mash { mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy-staph-ecoli.msh" }
                r_contaminants { mega_mm2_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi" }
                quast { min_contig_length = 1 }

                skip_bakta = true
                skip_mobrecon = true
                skip_checkm = true
                skip_raw_read_metrics = true
                skip_polishing = true
                
                skip_staramr = false
                skip_subtyping = false

                max_memory = "2.GB"
                max_cpus = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // parse final report json file
            def final_report = path("$launchDir/results/SummaryReport/final_report.json").json
            def ecoli_json = final_report.ecoli_GCA_000947975.ecoli_GCA_000947975
            assert ecoli_json.StarAMR."0".Genotype.equals("aph(3'')-Ib, aph(6)-Id, blaCTX-M-15, blaTEM-1B, dfrA7, gyrA (S83A), qacE, sul1, sul2, tet(A)")
            assert ecoli_json.StarAMR."0"."Predicted Phenotype".equals("streptomycin, kanamycin, ampicillin, ceftriaxone, trimethoprim, ciprofloxacin I/R, nalidixic acid, unknown[qacE_1_X68232], sulfisoxazole, tetracycline")
            assert ecoli_json.StarAMR."0".Plasmid.equals("IncQ1")
            assert ecoli_json.StarAMR."0".Scheme.equals("ecoli")
            assert ecoli_json.StarAMR."0"."Sequence Type".equals("678")
            assert ecoli_json.PointfinderDB.equals("escherichia_coli")

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            // output files
            assert iridanext_global.findAll { it.path == "SummaryReport/final_report.json" }.size() == 1

            // output metadata
            assert iridanext_metadata.ecoli_GCA_000947975."QUAST.0.Total length" == "5333525"
            assert iridanext_metadata.ecoli_GCA_000947975."QUAST.0.Largest contig" == "300823"
            assert iridanext_metadata.ecoli_GCA_000947975."QUAST.0.# contigs" == "187"
            assert iridanext_metadata.ecoli_GCA_000947975."QUAST.0.N50" == "122025"
        }
    }
}
