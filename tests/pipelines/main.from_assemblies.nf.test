nextflow_pipeline {

    name "Integration Tests from assemblies for MIKROKONDO"
    script "main.nf"

    test("Test starting from assemblies ecoli") {
        tag "from_assemblies_ecoli"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-test-from-assemblies.csv"
                outdir = "results"

                platform = "illumina"

                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy-staph-ecoli.msh"
                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"
                kraken2_db = "$baseDir/tests/data/kraken2/test"
                qt_min_contig_length = 1

                skip_bakta = true
                skip_mobrecon = true
                skip_checkm = true
                skip_raw_read_metrics = true
                skip_polishing = true

                skip_staramr = false
                skip_subtyping = false

                skip_allele_calling = true

                max_memory = "2.GB"
                max_cpus = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // parse final report json file
            def final_report = path("$launchDir/results/FinalReports/Aggregated/Json/final_report.json").json
            def ecoli_json = final_report.ecoli_GCA_000947975.ecoli_GCA_000947975
            assert ecoli_json.StarAMR."0".Genotype.equals("aph(3'')-Ib, aph(6)-Id, blaCTX-M-15, blaTEM-1B, dfrA7, gyrA (S83A), sul1, sul2, tet(A)")
            assert ecoli_json.StarAMR."0"."Predicted Phenotype".equals("streptomycin, kanamycin, ampicillin, ceftriaxone, trimethoprim, ciprofloxacin I/R, nalidixic acid, sulfisoxazole, tetracycline")
            assert ecoli_json.StarAMR."0"."CGE Predicted Phenotype".equals("Streptomycin, Amoxicillin, Ampicillin, Aztreonam, Cefepime, Cefotaxime, Ceftazidime, Ceftriaxone, Piperacillin, Ticarcillin, Cephalothin, Trimethoprim, Nalidixic acid, Ciprofloxacin, Sulfamethoxazole, Doxycycline, Tetracycline")
            assert ecoli_json.StarAMR."0".Plasmid.equals("IncQ1")
            assert ecoli_json.StarAMR."0".Scheme.equals("ecoli_achtman_4")
            assert ecoli_json.StarAMR."0"."Sequence Type".equals("678")
            assert ecoli_json.PointfinderDB.equals("escherichia_coli")
            assert ecoli_json.ECTyperSubtyping."0".Species.equals("Escherichia coli")
            assert ecoli_json.ECTyperSubtyping."0"."O-type".equals("O104")
            assert ecoli_json.ECTyperSubtyping."0"."H-type".equals("H4")
            assert ecoli_json.ECTyperSubtyping."0".Serotype.equals("O104:H4")
            assert ecoli_json.ECTyperSubtyping."0".Database.equals("v1.0 (11-03-2020)")
            assert ecoli_json.ECTyperSubtyping."0".QC.equals("PASS (REPORTABLE)")

            assert final_report.ecoli_GCA_000947975.QualityAnalysis.n50_value.value == 122025
            assert final_report.ecoli_GCA_000947975.QualityAnalysis.n50_value.qc_status == "PASSED"
            assert final_report.ecoli_GCA_000947975.QualityAnalysis.nr_contigs.qc_status == "PASSED"
            assert final_report.ecoli_GCA_000947975.QualityAnalysis.nr_contigs.value == 187
            assert final_report.ecoli_GCA_000947975.QualityAnalysis.length.value == 5333525
            assert final_report.ecoli_GCA_000947975.QualityAnalysis.length.qc_status == "PASSED"

            // parse final report tsv file
            def final_report_tmap = [:]
            def final_report_tsv = path("$launchDir/results/FinalReports/Aggregated/Tables/final_report.tsv").readLines()
            final_report_tsv.each {
                def tokens = it.split("\t")
                final_report_tmap[tokens[0]] = tokens[1]
            }
            assert final_report_tsv[0] == "\tecoli_GCA_000947975"
            assert final_report_tmap."QUAST.0.Total length" == "5333525"
            assert final_report_tmap."QUAST.0.Largest contig" == "300823"
            assert final_report_tmap."QUAST.0.# contigs" == "187"
            assert final_report_tmap."QUAST.0.N50" == "122025"
            assert final_report_tmap."StarAMR.0.Genotype" == "aph(3'')-Ib, aph(6)-Id, blaCTX-M-15, blaTEM-1B, dfrA7, gyrA (S83A), sul1, sul2, tet(A)"
            assert final_report_tmap."StarAMR.0.Predicted Phenotype" == "streptomycin, kanamycin, ampicillin, ceftriaxone, trimethoprim, ciprofloxacin I/R, nalidixic acid, sulfisoxazole, tetracycline"
            assert final_report_tmap."StarAMR.0.CGE Predicted Phenotype" == "Streptomycin, Amoxicillin, Ampicillin, Aztreonam, Cefepime, Cefotaxime, Ceftazidime, Ceftriaxone, Piperacillin, Ticarcillin, Cephalothin, Trimethoprim, Nalidixic acid, Ciprofloxacin, Sulfamethoxazole, Doxycycline, Tetracycline"
            assert final_report_tmap."StarAMR.0.Plasmid" == "IncQ1"
            assert final_report_tmap."StarAMR.0.Scheme" == "ecoli_achtman_4"
            assert final_report_tmap."StarAMR.0.Sequence Type" == "678"
            assert final_report_tmap."ECTyperSubtyping.0.Species" == "Escherichia coli"
            assert final_report_tmap."ECTyperSubtyping.0.O-type" == "O104"
            assert final_report_tmap."ECTyperSubtyping.0.H-type" == "H4"
            assert final_report_tmap."ECTyperSubtyping.0.Serotype" == "O104:H4"
            assert final_report_tmap."ECTyperSubtyping.0.Database" == "v1.0 (11-03-2020)"
            assert final_report_tmap."ECTyperSubtyping.0.QC" == "PASS (REPORTABLE)"


            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            // output files
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Json/final_report.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Tables/final_report.tsv" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/Quality/QUAST/ecoli_GCA_000947975/ecoli_GCA_000947975.transposed_ecoli_GCA_000947975.quast.quality.tsv" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/Quality/SeqKitStats/ecoli_GCA_000947975.seqkit.stats.summary.tsv" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/PostProcessing/Speciation/MashScreen/ecoli_GCA_000947975.mash.screen.taxa.screen.screen" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/Subtyping/ECTyper/ecoli_GCA_000947975/ecoli_GCA_000947975.blast_output_alleles.ectyper.subtyping.txt" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/Subtyping/ECTyper/ecoli_GCA_000947975/ecoli_GCA_000947975.ectyper.ectyper.subtyping.log" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/Subtyping/ECTyper/ecoli_GCA_000947975/ecoli_GCA_000947975.output.ectyper.subtyping.tsv" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "FinalReports/FlattenedReports/ecoli_GCA_000947975.flat_sample.json.gz" }.size() == 1

            // output metadata
            def ecoli_metadata = iridanext_metadata.ecoli_GCA_000947975

            assert ecoli_metadata."qc_status_overall" == "FAILED"
            assert !ecoli_metadata.containsKey("qc_status_contamination")
            assert !ecoli_metadata.containsKey("Checkm Value")
            assert !ecoli_metadata.containsKey("qc_status_read_depth_fixed")
            assert !ecoli_metadata.containsKey("Average Coverage Value")
            assert ecoli_metadata."n50 Status" == "PASSED"
            assert ecoli_metadata."n50 Value" == 122025
            assert !ecoli_metadata.containsKey("Raw Average Quality Status")
            assert !ecoli_metadata.containsKey("Raw Average Quality Value")
            assert ecoli_metadata.qc_status_assembly_genome_size == "PASSED"
            assert ecoli_metadata.assembly_length == 5333525
            assert ecoli_metadata.qc_status_assembly_num_contigs == "PASSED"
            assert ecoli_metadata.assembly_num_contigs == 187
            assert ecoli_metadata.qc_summary == "FAILED Species ID: Escherichia coli; Passed Tests: 3/4; Organism QC Criteria: Escherichia coli"

            assert ecoli_metadata."Downsampled" == false
            assert ecoli_metadata."predicted_identification_name" == "Escherichia coli"
            assert ecoli_metadata."predicted_identification_method" == "ECTyper"

            assert ecoli_metadata.SpeciesTopHit == "Escherichia coli"
            assert ecoli_metadata.IdentificationMethod == "Mash"

            assert ecoli_metadata."ECTyper Database" == "v1.0 (11-03-2020)"
            assert ecoli_metadata."ECTyper Evidence" == "Based on 3 allele(s)"
            assert ecoli_metadata."ECTyper GeneCoverages (%)" == "100;100;100;"
            assert ecoli_metadata."ECTyper GeneIdentities (%)" == "100;100;100;"
            assert ecoli_metadata."ECTyper GeneScores" == "wzx:1;wzy:1;fliC:1;"
            assert ecoli_metadata."ECTyper H-Antigen" == "H4"
            assert ecoli_metadata."ECTyper O-Antigen" == "O104"
            assert ecoli_metadata."ECTyper QCFlag" == "PASS (REPORTABLE)"
            assert ecoli_metadata."ECTyper Serotype" == "O104:H4"
            assert ecoli_metadata."ECTyper Subtyping" == "Escherichia coli"
            assert ecoli_metadata."ECTyper Warnings" == "-"

            assert ecoli_metadata."gc" == "50.58"
            assert !ecoli_metadata.containsKey("Mean Sequence Length Forward")
            assert !ecoli_metadata.containsKey("BaseCount")

            assert ecoli_metadata."icd" == "136"
            assert ecoli_metadata."recA" == "7"
            assert ecoli_metadata."fumC" == "6"
            assert ecoli_metadata."adk" == "6"
            assert ecoli_metadata."gyrB" == "5"
            assert ecoli_metadata."purA" == "7"
            assert ecoli_metadata."mdh" == "9"
            assert ecoli_metadata."7 Gene ST" == "678"
            assert ecoli_metadata."7 Gene Scheme" == "ecoli_achtman_4"

            assert ecoli_metadata."StarAMR Genotype" == "aph(3'')-Ib, aph(6)-Id, blaCTX-M-15, blaTEM-1B, dfrA7, gyrA (S83A), sul1, sul2, tet(A)"
            assert ecoli_metadata."StarAMR Predicted Phenotype" == "streptomycin, kanamycin, ampicillin, ceftriaxone, trimethoprim, ciprofloxacin I/R, nalidixic acid, sulfisoxazole, tetracycline"
            assert ecoli_metadata."StarAMR CGE Predicted Phenotype" == "Streptomycin, Amoxicillin, Ampicillin, Aztreonam, Cefepime, Cefotaxime, Ceftazidime, Ceftriaxone, Piperacillin, Ticarcillin, Cephalothin, Trimethoprim, Nalidixic acid, Ciprofloxacin, Sulfamethoxazole, Doxycycline, Tetracycline"
            assert ecoli_metadata."StarAMR Plasmid" == "IncQ1"

            // Read in filtered assembly fasta to verify number of contigs
            def assemblyLines = path("$launchDir/results/Assembly/FinalAssembly/ecoli_GCA_000947975/ecoli_GCA_000947975.final.filtered.assembly.fasta.gz").readLinesGzip()
            def actualNumberContigs = assemblyLines.findAll { it.startsWith(">") }.size()
            def actualLength = assemblyLines.findAll { !it.startsWith(">") }.collect { it.strip().size() }.sum()
            assert actualNumberContigs == 187
            assert actualLength == 5333525
        }
    }

        test("Test starting from assemblies ecoli with default min contig without speciation enabled for StarAMR") {
        tag "from_assemblies_ecoli_default_min_contig_no_speciation"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-test-from-assemblies.csv"
                outdir = "results"

                platform = "illumina"

                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy-staph-ecoli.msh"
                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"
                kraken2_db = "$baseDir/tests/data/kraken2/test"

                // Use default min contig, whould be 1000
                //qt_min_contig_length = 1000

                skip_bakta = true
                skip_mobrecon = true
                skip_checkm = true
                skip_raw_read_metrics = true
                skip_polishing = true
                skip_species_classification = true

                skip_staramr = false
                skip_subtyping = false

                skip_allele_calling = true

                max_memory = "2.GB"
                max_cpus = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            // output files
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Json/final_report.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Tables/final_report.tsv" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/Quality/QUAST/ecoli_GCA_000947975/ecoli_GCA_000947975.transposed_ecoli_GCA_000947975.quast.quality.tsv" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/Quality/SeqKitStats/ecoli_GCA_000947975.seqkit.stats.summary.tsv" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "FinalReports/FlattenedReports/ecoli_GCA_000947975.flat_sample.json.gz" }.size() == 1

            // output metadata
            def ecoli_metadata = iridanext_metadata.ecoli_GCA_000947975
            assert ecoli_metadata.qc_status_overall == "FAILED"
            assert ecoli_metadata."n50 Value" == 122025
            assert ecoli_metadata.assembly_length == 5299656
            assert ecoli_metadata.assembly_num_contigs == 123
            assert ecoli_metadata."StarAMR Genotype" == "aph(3'')-Ib, aph(6)-Id, blaCTX-M-15, blaTEM-1B, dfrA7, sul1, sul2, tet(A)"

            // Read in filtered assembly fasta to verify number of contigs
            def assemblyLines = path("$launchDir/results/Assembly/FinalAssembly/ecoli_GCA_000947975/ecoli_GCA_000947975.final.filtered.assembly.fasta.gz").readLinesGzip()
            def actualNumberContigs = assemblyLines.findAll { it.startsWith(">") }.size()
            def actualLength = assemblyLines.findAll { !it.startsWith(">") }.collect { it.strip().size() }.sum()
            assert actualNumberContigs == 123
            assert actualLength == 5299656
        }
    }

    test("Test starting from assemblies ecoli with default min contig") {
        tag "from_assemblies_ecoli_default_min_contig"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-test-from-assemblies.csv"
                outdir = "results"

                platform = "illumina"

                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy-staph-ecoli.msh"
                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"
                kraken2_db = "$baseDir/tests/data/kraken2/test"

                // Use default min contig, whould be 1000
                //qt_min_contig_length = 1000

                skip_bakta = true
                skip_mobrecon = true
                skip_checkm = true
                skip_raw_read_metrics = true
                skip_polishing = true

                skip_staramr = false
                skip_subtyping = false

                skip_allele_calling = true

                max_memory = "2.GB"
                max_cpus = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            // output files
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Json/final_report.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Tables/final_report.tsv" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/Quality/QUAST/ecoli_GCA_000947975/ecoli_GCA_000947975.transposed_ecoli_GCA_000947975.quast.quality.tsv" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/Quality/SeqKitStats/ecoli_GCA_000947975.seqkit.stats.summary.tsv" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/PostProcessing/Speciation/MashScreen/ecoli_GCA_000947975.mash.screen.taxa.screen.screen" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/Subtyping/ECTyper/ecoli_GCA_000947975/ecoli_GCA_000947975.blast_output_alleles.ectyper.subtyping.txt" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/Subtyping/ECTyper/ecoli_GCA_000947975/ecoli_GCA_000947975.ectyper.ectyper.subtyping.log" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "Assembly/Subtyping/ECTyper/ecoli_GCA_000947975/ecoli_GCA_000947975.output.ectyper.subtyping.tsv" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "FinalReports/FlattenedReports/ecoli_GCA_000947975.flat_sample.json.gz" }.size() == 1

            // output metadata
            def ecoli_metadata = iridanext_metadata.ecoli_GCA_000947975

            assert ecoli_metadata.qc_status_overall == "FAILED"
            assert !ecoli_metadata.containsKey("qc_status_contamination")
            assert !ecoli_metadata.containsKey("Checkm Value")
            assert !ecoli_metadata.containsKey("qc_status_read_depth_fixed")
            assert !ecoli_metadata.containsKey("Average Coverage Value")
            assert ecoli_metadata."n50 Status" == "PASSED"
            assert ecoli_metadata."n50 Value" == 122025
            assert !ecoli_metadata.containsKey("Raw Average Quality Status")
            assert !ecoli_metadata.containsKey("Raw Average Quality Value")
            assert ecoli_metadata.qc_status_assembly_genome_size == "PASSED"
            assert ecoli_metadata.assembly_length == 5299656
            assert ecoli_metadata.qc_status_assembly_num_contigs == "PASSED"
            assert ecoli_metadata.assembly_num_contigs == 123
            assert ecoli_metadata.qc_summary == "FAILED Species ID: Escherichia coli; Passed Tests: 3/4; Organism QC Criteria: Escherichia coli"

            // Read in filtered assembly fasta to verify number of contigs
            def assemblyLines = path("$launchDir/results/Assembly/FinalAssembly/ecoli_GCA_000947975/ecoli_GCA_000947975.final.filtered.assembly.fasta.gz").readLinesGzip()
            def actualNumberContigs = assemblyLines.findAll { it.startsWith(">") }.size()
            def actualLength = assemblyLines.findAll { !it.startsWith(">") }.collect { it.strip().size() }.sum()
            assert actualNumberContigs == 123
            assert actualLength == 5299656
        }
    }

    test("Test starting from assemblies salmonella") {
        tag "from_assemblies_salmonella"

        when {
            params {
                input = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/samplesheets/samplesheet-test-from-assemblies-salmonella.csv"
                outdir = "results"

                platform = "illumina"

                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/mash.msh"
                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"
                kraken2_db = "$baseDir/tests/data/kraken2/test"
                qt_min_contig_length = 1

                skip_bakta = true
                skip_mobrecon = true
                skip_checkm = true
                skip_raw_read_metrics = true
                skip_polishing = true

                skip_staramr = false
                skip_subtyping = false
                skip_allele_calling = false

                override_allele_scheme = "$baseDir/tests/data/databases/locidex_dbs/locidex_salm"

                max_memory = "2.GB"
                max_cpus = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            assert path("$launchDir/results/Assembly/Subtyping/SISTR/salmonella_GCA_000008105.sistr.allele.subtyping.fasta").exists()
            assert path("$launchDir/results/Assembly/Subtyping/SISTR/salmonella_GCA_000008105.sistr.allele.subtyping.json").exists()
            assert path("$launchDir/results/Assembly/Subtyping/SISTR/salmonella_GCA_000008105.sistr.cgmlst.subtyping.csv").exists()
            assert path("$launchDir/results/Assembly/Subtyping/SISTR/salmonella_GCA_000008105.sistr.subtyping.tab").exists()

            assert path("$launchDir/results/Assembly/Annotation/StarAMR/salmonella_GCA_000008105/salmonella_GCA_000008105.plasmidfinder.staramr.annotation.tsv").exists()
            assert path("$launchDir/results/Assembly/Annotation/StarAMR/salmonella_GCA_000008105/salmonella_GCA_000008105.pointfinder.staramr.annotation.tsv").exists()
            assert path("$launchDir/results/Assembly/Annotation/StarAMR/salmonella_GCA_000008105/salmonella_GCA_000008105.resfinder.staramr.annotation.tsv").exists()
            assert path("$launchDir/results/Assembly/Annotation/StarAMR/salmonella_GCA_000008105/salmonella_GCA_000008105.detailed_summary.staramr.annotation.tsv").exists()

            // Check Locidex outputs
            def acutal_mlst_profile = path("$launchDir/results/Assembly/Subtyping/Locidex/Report/salmonella_GCA_000008105.locidex.report.profile.mlst.subtyping.json.gz")
            assert acutal_mlst_profile.exists()
            assert path("$launchDir/results/Assembly/Subtyping/Locidex/Extract/salmonella_GCA_000008105/salmonella_GCA_000008105.raw.locidex.extract.extracted.seqs.subtyping.fasta.gz").exists()
            assert path("$launchDir/results/Assembly/Subtyping/Locidex/Search/salmonella_GCA_000008105.locidex.seq_store.json.gz").exists()

            // compare IRIDA Next JSON output
            assert path("$launchDir/results/iridanext.output.json").exists()
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples
            def salmonella_metadata = iridanext_metadata.salmonella_GCA_000008105

            assert salmonella_metadata.qc_status_overall == "FAILED"
            assert !salmonella_metadata.containsKey("qc_status_contamination")
            assert !salmonella_metadata.containsKey("Checkm Value")
            assert !salmonella_metadata.containsKey("qc_status_read_depth_fixed")
            assert !salmonella_metadata.containsKey("Average Coverage Value")
            assert salmonella_metadata."n50 Status" == "PASSED"
            assert salmonella_metadata."n50 Value" == 4755700
            assert !salmonella_metadata.containsKey("Raw Average Quality Status")
            assert !salmonella_metadata.containsKey("Raw Average Quality Value")
            assert salmonella_metadata.qc_status_assembly_genome_size == "PASSED"
            assert salmonella_metadata.assembly_length == 4944000
            assert salmonella_metadata.qc_status_assembly_num_contigs == "PASSED"
            assert salmonella_metadata.assembly_num_contigs == 3
            assert salmonella_metadata.qc_summary == "FAILED Species ID: Salmonella enterica; Passed Tests: 3/4; Organism QC Criteria: Salmonella"

            assert salmonella_metadata."Downsampled" == false

            // parse final report tsv file
            def final_report_tmap = [:]
            def final_report_tsv = path("$launchDir/results/FinalReports/Aggregated/Tables/final_report.tsv").readLines()
            final_report_tsv.each {
                def tokens = it.split("\t")
                final_report_tmap[tokens[0]] = tokens[1]
            }

            // output files
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Json/final_report.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Tables/final_report.tsv" }.size() == 1
            assert iridanext_samples.salmonella_GCA_000008105.findAll { it.path == "Assembly/Quality/QUAST/salmonella_GCA_000008105/salmonella_GCA_000008105.transposed_salmonella_GCA_000008105.quast.quality.tsv" }.size() == 1
            assert iridanext_samples.salmonella_GCA_000008105.findAll { it.path == "Assembly/Quality/SeqKitStats/salmonella_GCA_000008105.seqkit.stats.summary.tsv" }.size() == 1
            assert iridanext_samples.salmonella_GCA_000008105.findAll { it.path == "Assembly/PostProcessing/Speciation/MashScreen/salmonella_GCA_000008105.mash.screen.taxa.screen.screen" }.size() == 1
            assert iridanext_samples.salmonella_GCA_000008105.findAll { it.path == "Assembly/Subtyping/SISTR/salmonella_GCA_000008105.sistr.subtyping.tab" }.size() == 1
            assert iridanext_samples.salmonella_GCA_000008105.findAll { it.path == "Assembly/Subtyping/SISTR/salmonella_GCA_000008105.sistr.allele.subtyping.fasta" }.size() == 1
            assert iridanext_samples.salmonella_GCA_000008105.findAll { it.path == "Assembly/Subtyping/SISTR/salmonella_GCA_000008105.sistr.allele.subtyping.json" }.size() == 1
            assert iridanext_samples.salmonella_GCA_000008105.findAll { it.path == "Assembly/Subtyping/SISTR/salmonella_GCA_000008105.sistr.cgmlst.subtyping.csv" }.size() == 1
            assert iridanext_samples.salmonella_GCA_000008105.findAll { it.path == "Assembly/Subtyping/Locidex/Report/salmonella_GCA_000008105.locidex.report.profile.mlst.subtyping.json.gz" }.size() == 1
            assert iridanext_samples.salmonella_GCA_000008105.findAll { it.path == "FinalReports/FlattenedReports/salmonella_GCA_000008105.flat_sample.json.gz" }.size() == 1

            // parse final report json file
            def final_report = path("$launchDir/results/FinalReports/Aggregated/Json/final_report.json").json
            def salmonella_json = final_report.salmonella_GCA_000008105.salmonella_GCA_000008105

            assert final_report.salmonella_GCA_000008105.QualityAnalysis.n50_value.value == 4755700
            assert final_report.salmonella_GCA_000008105.QualityAnalysis.n50_value.qc_status == "PASSED"
            assert final_report.salmonella_GCA_000008105.QualityAnalysis.nr_contigs.qc_status == "PASSED"
            assert final_report.salmonella_GCA_000008105.QualityAnalysis.nr_contigs.value == 3
            assert final_report.salmonella_GCA_000008105.QualityAnalysis.length.value == 4944000
            assert final_report.salmonella_GCA_000008105.QualityAnalysis.length.qc_status == "PASSED"

            // Tests
            assert iridanext_metadata.salmonella_GCA_000008105.SpeciesTopHit == "Salmonella enterica"
            assert iridanext_metadata.salmonella_GCA_000008105.IdentificationMethod == "Mash"
            assert iridanext_metadata.salmonella_GCA_000008105."predicted_identification_method" == "Mash"
            assert iridanext_metadata.salmonella_GCA_000008105."predicted_identification_name" == "Salmonella enterica"
            assert iridanext_metadata.salmonella_GCA_000008105."predicted_identification_method" == "Mash"

            assert salmonella_json.QUAST."0"."Total length" == "4944000"
            assert final_report_tmap."QUAST.0.Total length" == "4944000"

            assert salmonella_json.QUAST."0"."Largest contig" == "4755700"
            assert final_report_tmap."QUAST.0.Largest contig" == "4755700"

            assert salmonella_json.QUAST."0"."# contigs" == "3"
            assert final_report_tmap."QUAST.0.# contigs" == "3"

            assert salmonella_json.QUAST."0"."N50" == "4755700"
            assert final_report_tmap."QUAST.0.N50" == "4755700"

            assert salmonella_json.StarAMR."0".Genotype == "aadA1, aadA2, aadA2, aph(3'')-Ib, aph(3')-Ia, blaCMY-2, blaTEM-1B, cmlA1, dfrA12, gyrA (D87N), gyrA (S83F), sul1, sul3, tet(A)"
            assert iridanext_metadata.salmonella_GCA_000008105."StarAMR Genotype" == "aadA1, aadA2, aadA2, aph(3'')-Ib, aph(3')-Ia, blaCMY-2, blaTEM-1B, cmlA1, dfrA12, gyrA (D87N), gyrA (S83F), sul1, sul3, tet(A)"
            assert final_report_tmap."StarAMR.0.Genotype" == "aadA1, aadA2, aadA2, aph(3'')-Ib, aph(3')-Ia, blaCMY-2, blaTEM-1B, cmlA1, dfrA12, gyrA (D87N), gyrA (S83F), sul1, sul3, tet(A)"

            assert salmonella_json.StarAMR."0"."Predicted Phenotype" == "streptomycin, kanamycin, ampicillin, amoxicillin/clavulanic acid, cefoxitin, ceftriaxone, chloramphenicol, trimethoprim, ciprofloxacin I/R, nalidixic acid, sulfisoxazole, tetracycline"
            assert iridanext_metadata.salmonella_GCA_000008105."StarAMR Predicted Phenotype" == "streptomycin, kanamycin, ampicillin, amoxicillin/clavulanic acid, cefoxitin, ceftriaxone, chloramphenicol, trimethoprim, ciprofloxacin I/R, nalidixic acid, sulfisoxazole, tetracycline"
            assert final_report_tmap."StarAMR.0.Predicted Phenotype" == "streptomycin, kanamycin, ampicillin, amoxicillin/clavulanic acid, cefoxitin, ceftriaxone, chloramphenicol, trimethoprim, ciprofloxacin I/R, nalidixic acid, sulfisoxazole, tetracycline"

            assert salmonella_json.StarAMR."0"."CGE Predicted Phenotype" == "Spectinomycin, Streptomycin, Neomycin, Kanamycin, Lividomycin, Paromomycin, Ribostamycin, Amoxicillin, Amoxicillin+Clavulanic acid, Ampicillin, Ampicillin+Clavulanic acid, Cefotaxime, Cefoxitin, Ceftazidime, Piperacillin, Piperacillin+Tazobactam, Ticarcillin, Ticarcillin+Clavulanic acid, Cephalothin, Chloramphenicol, Trimethoprim, Nalidixic acid, Ciprofloxacin, Sulfamethoxazole, Doxycycline, Tetracycline"
            assert iridanext_metadata.salmonella_GCA_000008105."StarAMR CGE Predicted Phenotype" == "Spectinomycin, Streptomycin, Neomycin, Kanamycin, Lividomycin, Paromomycin, Ribostamycin, Amoxicillin, Amoxicillin+Clavulanic acid, Ampicillin, Ampicillin+Clavulanic acid, Cefotaxime, Cefoxitin, Ceftazidime, Piperacillin, Piperacillin+Tazobactam, Ticarcillin, Ticarcillin+Clavulanic acid, Cephalothin, Chloramphenicol, Trimethoprim, Nalidixic acid, Ciprofloxacin, Sulfamethoxazole, Doxycycline, Tetracycline"
            assert final_report_tmap."StarAMR.0.CGE Predicted Phenotype" == "Spectinomycin, Streptomycin, Neomycin, Kanamycin, Lividomycin, Paromomycin, Ribostamycin, Amoxicillin, Amoxicillin+Clavulanic acid, Ampicillin, Ampicillin+Clavulanic acid, Cefotaxime, Cefoxitin, Ceftazidime, Piperacillin, Piperacillin+Tazobactam, Ticarcillin, Ticarcillin+Clavulanic acid, Cephalothin, Chloramphenicol, Trimethoprim, Nalidixic acid, Ciprofloxacin, Sulfamethoxazole, Doxycycline, Tetracycline"

            assert salmonella_json.StarAMR."0".Plasmid == "IncFIB(K), IncFIB(S), IncFII(S)"
            assert iridanext_metadata.salmonella_GCA_000008105."StarAMR Plasmid" == "IncFIB(K), IncFIB(S), IncFII(S)"
            assert final_report_tmap."StarAMR.0.Plasmid" == "IncFIB(K), IncFIB(S), IncFII(S)"

            assert salmonella_json.StarAMR."0".Scheme == "senterica_achtman_2"
            assert final_report_tmap."StarAMR.0.Scheme" == "senterica_achtman_2"

            assert salmonella_json.StarAMR."0"."Sequence Type" == "66"
            assert final_report_tmap."StarAMR.0.Sequence Type" == "66"

            assert salmonella_json.SISTRSubtyping."0".serovar == "Choleraesuis"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR Serovar" == "Choleraesuis"
            assert final_report_tmap."SISTRSubtyping.0.serovar" == "Choleraesuis"

            assert salmonella_json.SISTRSubtyping."0".serogroup == "C1"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR Serogroup" == "C1"
            assert final_report_tmap."SISTRSubtyping.0.serogroup" == "C1"

            assert salmonella_json.SISTRSubtyping."0".serovar_antigen == "Hissar|Choleraesuis|Paratyphi C|Typhisuis|Chiredzi"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR Serovar Antigen" == "Hissar|Choleraesuis|Paratyphi C|Typhisuis|Chiredzi"
            assert final_report_tmap."SISTRSubtyping.0.serovar_antigen" == "Hissar|Choleraesuis|Paratyphi C|Typhisuis|Chiredzi"

            // other metadata for IRIDA Next
            assert iridanext_metadata.salmonella_GCA_000008105."gc" == "52.13"
            assert !iridanext_metadata.salmonella_GCA_000008105.containsKey("Mean Sequence Length Forward")
            assert !iridanext_metadata.salmonella_GCA_000008105.containsKey("BaseCount")
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR cgMLST ST" == "2572600197"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR cgMLST Found Loci" == "330"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR cgMLST Genome Match" == "ERR351246"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR cgMLST Matching Alleles" == "320"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR cgMLST Subspecies" == "enterica"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR H1" == "c"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR H2" == "1,5"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR Antigen" == "6,7"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR QC Message" == "INFO: Number of cgMLST330 loci found (n=330)"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR QC Status" == "PASS"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR Serovar cgMLST" == "Choleraesuis"
        }
    }

    test("Test starting from assemblies listeria") {
        tag "from_assemblies_listeria"

        when {
            params {
                input = "https://raw.githubusercontent.com/phac-nml/mikrokondo/dev/tests/data/samplesheets/samplesheet-test-from-assemblies-listeria.csv"
                outdir = "results"

                platform = "illumina"

                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/mash.msh"
                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"
                kraken2_db = "$baseDir/tests/data/kraken2/test"
                qt_min_contig_length = 1

                skip_bakta = true
                skip_mobrecon = true
                skip_checkm = true
                skip_raw_read_metrics = true
                skip_polishing = true

                skip_staramr = false
                skip_subtyping = false
                skip_allele_calling = true

                max_memory = "2.GB"
                max_cpus = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            assert path("$launchDir/results/Assembly/Subtyping/Lissero/listeria_GCF_000196035.lissero.subtyping.tsv").exists()

            assert path("$launchDir/results/Assembly/Annotation/StarAMR/listeria_GCF_000196035/listeria_GCF_000196035.plasmidfinder.staramr.annotation.tsv").exists()
            assert path("$launchDir/results/Assembly/Annotation/StarAMR/listeria_GCF_000196035/listeria_GCF_000196035.resfinder.staramr.annotation.tsv").exists()
            assert path("$launchDir/results/Assembly/Annotation/StarAMR/listeria_GCF_000196035/listeria_GCF_000196035.detailed_summary.staramr.annotation.tsv").exists()

            // compare IRIDA Next JSON output
            assert path("$launchDir/results/iridanext.output.json").exists()
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples
            def listeria_metadata = iridanext_metadata.listeria_GCF_000196035

            assert listeria_metadata.qc_status_overall == "FAILED"
            assert !listeria_metadata.containsKey("qc_status_contamination")
            assert !listeria_metadata.containsKey("checkm_value")
            assert !listeria_metadata.containsKey("qc_status_read_depth_fixed")
            assert !listeria_metadata.containsKey("mean_read_depth_fixed")
            assert listeria_metadata."n50 Status" == "PASSED"
            assert listeria_metadata."n50 Value" == 2944528
            assert !listeria_metadata.containsKey("qc_status_read_qual")
            assert !listeria_metadata.containsKey("Raw Average Quality Value")
            assert listeria_metadata."qc_status_assembly_genome_size" == "PASSED"
            assert listeria_metadata."assembly_length" == 2944528
            assert listeria_metadata."qc_status_assembly_num_contigs" == "PASSED"
            assert listeria_metadata."assembly_num_contigs" == 1
            assert listeria_metadata.qc_summary == "FAILED Species ID: Listeria monocytogenes; Passed Tests: 3/4; Organism QC Criteria: Listeria monocytogenes"

            assert listeria_metadata."Downsampled" == false

            // parse final report tsv file
            def final_report_tmap = [:]
            def final_report_tsv = path("$launchDir/results/FinalReports/Aggregated/Tables/final_report.tsv").readLines()
            final_report_tsv.each {
                def tokens = it.split("\t")
                final_report_tmap[tokens[0]] = tokens[1]
            }

            // output files
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Json/final_report.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Tables/final_report.tsv" }.size() == 1
            assert iridanext_samples.listeria_GCF_000196035.findAll { it.path == "Assembly/Quality/QUAST/listeria_GCF_000196035/listeria_GCF_000196035.transposed_listeria_GCF_000196035.quast.quality.tsv" }.size() == 1
            assert iridanext_samples.listeria_GCF_000196035.findAll { it.path == "Assembly/Quality/SeqKitStats/listeria_GCF_000196035.seqkit.stats.summary.tsv" }.size() == 1
            assert iridanext_samples.listeria_GCF_000196035.findAll { it.path == "Assembly/PostProcessing/Speciation/MashScreen/listeria_GCF_000196035.mash.screen.taxa.screen.screen" }.size() == 1
            assert iridanext_samples.listeria_GCF_000196035.findAll { it.path == "Assembly/Subtyping/Lissero/listeria_GCF_000196035.lissero.subtyping.tsv" }.size() == 1
            assert iridanext_samples.listeria_GCF_000196035.findAll { it.path == "FinalReports/FlattenedReports/listeria_GCF_000196035.flat_sample.json.gz" }.size() == 1

            // parse final report json file
            def final_report = path("$launchDir/results/FinalReports/Aggregated/Json/final_report.json").json
            def listeria_json = final_report.listeria_GCF_000196035.listeria_GCF_000196035

            assert final_report.listeria_GCF_000196035.QualityAnalysis.n50_value.value == 2944528
            assert final_report.listeria_GCF_000196035.QualityAnalysis.n50_value.qc_status == "PASSED"
            assert final_report.listeria_GCF_000196035.QualityAnalysis.nr_contigs.qc_status == "PASSED"
            assert final_report.listeria_GCF_000196035.QualityAnalysis.nr_contigs.value == 1
            assert final_report.listeria_GCF_000196035.QualityAnalysis.length.value == 2944528
            assert final_report.listeria_GCF_000196035.QualityAnalysis.length.qc_status == "PASSED"

            // Tests
            assert listeria_json.SpeciesTopHit == "Listeria monocytogenes"
            assert iridanext_metadata.listeria_GCF_000196035."predicted_identification_name" == "Listeria monocytogenes"
            assert iridanext_metadata.listeria_GCF_000196035."predicted_identification_method" == "Mash"
            assert final_report_tmap.SpeciesTopHit == "Listeria monocytogenes"

            assert listeria_json.QUAST."0"."Total length" == "2944528"
            assert final_report_tmap."QUAST.0.Total length" == "2944528"

            assert listeria_json.QUAST."0"."Largest contig" == "2944528"
            assert final_report_tmap."QUAST.0.Largest contig" == "2944528"

            assert listeria_json.QUAST."0"."# contigs" == "1"
            assert final_report_tmap."QUAST.0.# contigs" == "1"

            assert listeria_json.QUAST."0"."N50" == "2944528"
            assert final_report_tmap."QUAST.0.N50" == "2944528"

            assert listeria_json.StarAMR."0".Genotype == "fosX"
            assert iridanext_metadata.listeria_GCF_000196035."StarAMR Genotype" == "fosX"
            assert final_report_tmap."StarAMR.0.Genotype" == "fosX"

            assert listeria_json.StarAMR."0"."Predicted Phenotype" == "fosfomycin"
            assert iridanext_metadata.listeria_GCF_000196035."StarAMR Predicted Phenotype" == "fosfomycin"
            assert final_report_tmap."StarAMR.0.Predicted Phenotype" == "fosfomycin"

            assert listeria_json.StarAMR."0"."CGE Predicted Phenotype" == "Fosfomycin"
            assert iridanext_metadata.listeria_GCF_000196035."StarAMR CGE Predicted Phenotype" == "Fosfomycin"
            assert final_report_tmap."StarAMR.0.CGE Predicted Phenotype" == "Fosfomycin"

            assert listeria_json.StarAMR."0".Plasmid == "None"
            assert iridanext_metadata.listeria_GCF_000196035."StarAMR Plasmid" == "None"
            assert final_report_tmap."StarAMR.0.Plasmid" == "None"

            assert listeria_json.StarAMR."0".Scheme == "listeria_2"
            assert final_report_tmap."StarAMR.0.Scheme" == "listeria_2"

            assert listeria_json.StarAMR."0"."Sequence Type" == "35"
            assert final_report_tmap."StarAMR.0.Sequence Type" == "35"

            assert listeria_json.LISSEROSubtyping."0".SEROTYPE == "1/2c, 3c"
            assert iridanext_metadata.listeria_GCF_000196035."LISSERO Serotype" == "1/2c, 3c"
            assert final_report_tmap."LISSEROSubtyping.0.SEROTYPE" == "1/2c, 3c"

            assert listeria_json.LISSEROSubtyping."0".PRS == "FULL"
            assert final_report_tmap."LISSEROSubtyping.0.PRS" == "FULL"

            assert listeria_json.LISSEROSubtyping."0".ORF2110 == "NONE"
            assert final_report_tmap."LISSEROSubtyping.0.ORF2110" == "NONE"

            assert iridanext_metadata.listeria_GCF_000196035."gc" == "37.98"
            assert !iridanext_metadata.listeria_GCF_000196035.containsKey("Mean Sequence Length Forward")
            assert !iridanext_metadata.listeria_GCF_000196035.containsKey("BaseCount")

            assert iridanext_metadata.listeria_GCF_000196035."dat" == "1"
            assert iridanext_metadata.listeria_GCF_000196035."ldh" == "4"
            assert iridanext_metadata.listeria_GCF_000196035."cat" == "6"
            assert iridanext_metadata.listeria_GCF_000196035."abcZ" == "6"
            assert iridanext_metadata.listeria_GCF_000196035."bglA" == "5"
            assert iridanext_metadata.listeria_GCF_000196035."dapE" == "20"
            assert iridanext_metadata.listeria_GCF_000196035."lhkA" == "1"
            assert iridanext_metadata.listeria_GCF_000196035."7 Gene ST" == "35"
            assert iridanext_metadata.listeria_GCF_000196035."7 Gene Scheme" == "listeria_2"
        }
    }

    test("Test starting from concatemers Vibrio cholerae") {
        tag "from_assemblies_vibrio"

        when {
            params {
                // Need to update with 7 gene when complete
                input = "https://raw.githubusercontent.com/phac-nml/mikrokondo/dev/tests/data/samplesheets/samplesheet-test-from-assemblies-vibrio.csv"
                outdir = "results"

                platform = "illumina"

                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/mash.msh"
                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"
                kraken2_db = "$baseDir/tests/data/kraken2/test"
                lx_allele_database = "$baseDir/tests/data/databases/locidex_dbs"
                qt_min_contig_length = 1

                skip_bakta = true
                skip_mobrecon = true
                skip_checkm = true
                skip_raw_read_metrics = true
                skip_polishing = true
                skip_mlst = true
                skip_version_gathering = true
                skip_staramr = true
                skip_length_filtering_contigs = true

                skip_subtyping = false
                skip_allele_calling = false
                lx_report_max_stop = 100
                max_memory = "2.GB"
                max_cpus = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Compare IRIDANext json
            assert path("$launchDir/results/iridanext.output.json").exists()
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples
            def vibrio_metadata = iridanext_metadata.st_120

            // Output files
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Json/final_report.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Tables/final_report.tsv" }.size() == 1
            assert iridanext_samples.st_120.findAll { it.path == "FinalReports/FlattenedReports/st_120.flat_sample.json.gz" }.size() == 1
            assert iridanext_samples.st_120.findAll { it.path == "Assembly/Subtyping/Locidex/Report/st_120.locidex.report.profile.mlst.subtyping.json.gz" }.size() == 1
            assert iridanext_samples.st_120.findAll { it.path == "Assembly/Subtyping/Locidex/Summary/st_120.locidex.summary.json" }.size() == 1

            assert vibrio_metadata.locidex_db_name == "Vibrio cholerae"
            assert vibrio_metadata.locidex_db_date == "2024-07-30"
            assert vibrio_metadata.locidex_db_version == "1.0.0"
            assert vibrio_metadata.locidex_db_total_loci_count == 7
            assert vibrio_metadata.locidex_count_loci_found == 6
            assert vibrio_metadata.locidex_count_loci_missing == 1


            // Output files check
            assert path("$launchDir/results/Assembly/Subtyping/Locidex/Select/st_120.st_120_SelectedLocidexConfig.locidex.db.json")
            assert path("$launchDir/results/Assembly/Subtyping/Locidex/Extract/st_120/st_120.raw.locidex.extract.extracted.seqs.subtyping.fasta.gz")
            assert path("$launchDir/results/Assembly/Subtyping/Locidex/Search/st_120.locidex.seq_store.json.gz")
            assert path("$launchDir/results/Assembly/Subtyping/Locidex/Report/st_120.locidex.report.profile.mlst.subtyping.json.gz")
            assert path("$launchDir/results/Assembly/Subtyping/Locidex/Summary/st_120.locidex.summary.json")

        }
    }

    test("Test of Database output from concatemers Vibrio cholerae") {
    tag "from_assemblies_vibrio_allele_scheme"

        when {
            params {
                // Need to update with 7 gene when complete
                input = "https://raw.githubusercontent.com/phac-nml/mikrokondo/dev/tests/data/samplesheets/samplesheet-test-from-assemblies-vibrio.csv"
                outdir = "results"

                platform = "illumina"

                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/mash.msh"
                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"
                kraken2_db = "$baseDir/tests/data/kraken2/test"
                override_allele_scheme= "$baseDir/tests/data/databases/locidex_dbs/locidex_vc"
                qt_min_contig_length = 1

                skip_bakta = true
                skip_mobrecon = true
                skip_checkm = true
                skip_raw_read_metrics = true
                skip_polishing = true
                skip_mlst = true
                skip_version_gathering = true
                skip_staramr = true
                skip_length_filtering_contigs = true

                skip_subtyping = false
                skip_allele_calling = false
                lx_report_max_stop = 100
                max_memory = "2.GB"
                max_cpus = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Compare IRIDANext json
            assert path("$launchDir/results/iridanext.output.json").exists()
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples
            def vibrio_metadata = iridanext_metadata.st_120

            // Output files
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Json/final_report.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Tables/final_report.tsv" }.size() == 1
            assert iridanext_samples.st_120.findAll { it.path == "FinalReports/FlattenedReports/st_120.flat_sample.json.gz" }.size() == 1
            assert iridanext_samples.st_120.findAll { it.path == "Assembly/Subtyping/Locidex/Report/st_120.locidex.report.profile.mlst.subtyping.json.gz" }.size() == 1
            assert iridanext_samples.st_120.findAll { it.path == "Assembly/Subtyping/Locidex/Summary/st_120.locidex.summary.json" }.size() == 1

            assert vibrio_metadata.locidex_db_name == "Vibrio cholerae_1"
            assert vibrio_metadata.locidex_db_date == "2024-08-01"
            assert vibrio_metadata.locidex_db_version == "1.0.0"
            assert vibrio_metadata.locidex_db_total_loci_count == 7
            assert vibrio_metadata.locidex_count_loci_found == 6
            assert vibrio_metadata.locidex_count_loci_missing == 1


            // Output files check
            assert path("$launchDir/results/Assembly/Subtyping/Locidex/Extract/st_120/st_120.raw.locidex.extract.extracted.seqs.subtyping.fasta.gz")
            assert path("$launchDir/results/Assembly/Subtyping/Locidex/Search/st_120.locidex.seq_store.json.gz")
            assert path("$launchDir/results/Assembly/Subtyping/Locidex/Report/st_120.locidex.report.profile.mlst.subtyping.json.gz")
            assert path("$launchDir/results/Assembly/Subtyping/Locidex/Summary/st_120.locidex.summary.json")

        }
    }

        test("Test Stupid Name in Input Sheet") {
        tag "from_assemblies_stupidnames"

        when {
            params {
                // Need to update with 7 gene when complete
                input = "$baseDir/tests/data/samplesheets/samplesheet-test-from-assemblies-vibrio-stupid-names.csv"
                outdir = "results"

                platform = "illumina"

                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/mash.msh"
                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"
                kraken2_db = "$baseDir/tests/data/kraken2/test"
                lx_allele_database = "$baseDir/tests/data/databases/locidex_dbs"
                qt_min_contig_length = 1

                skip_bakta = true
                skip_mobrecon = true
                skip_checkm = true
                skip_raw_read_metrics = true
                skip_polishing = true
                skip_mlst = true
                skip_version_gathering = true
                skip_staramr = true
                skip_length_filtering_contigs = true

                skip_subtyping = false
                skip_allele_calling = false
                lx_report_max_stop = 100
                max_memory = "2.GB"
                max_cpus = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Compare IRIDANext json
            assert path("$launchDir/results/iridanext.output.json").exists()
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples
            def vibrio_metadata = iridanext_metadata.INX

            // Output files
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Json/final_report.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "FinalReports/Aggregated/Tables/final_report.tsv" }.size() == 1

            assert vibrio_metadata.locidex_db_name == "Vibrio cholerae"
            assert vibrio_metadata.locidex_db_date == "2024-07-30"
            assert vibrio_metadata.locidex_db_version == "1.0.0"
            assert vibrio_metadata.locidex_db_total_loci_count == 7
            assert vibrio_metadata.locidex_count_loci_found == 6
            assert vibrio_metadata.locidex_count_loci_missing == 1

        }
    }


}
