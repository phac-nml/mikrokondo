nextflow_pipeline {

    name "Integration Tests from assemblies for MIKROKONDO"
    script "main.nf"

    test("Test starting from assemblies ecoli") {
        tag "from_assemblies_ecoli"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-test-from-assemblies.csv"
                outdir = "results"

                platform = "illumina"

                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy-staph-ecoli.msh"
                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"
                qt_min_contig_length = 1

                skip_bakta = true
                skip_mobrecon = true
                skip_checkm = true
                skip_raw_read_metrics = true
                skip_polishing = true

                skip_staramr = false
                skip_subtyping = false

                skip_allele_calling = true

                max_memory = "2.GB"
                max_cpus = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // parse final report json file
            def final_report = path("$launchDir/results/SummaryReport/final_report.json").json
            def ecoli_json = final_report.ecoli_GCA_000947975.ecoli_GCA_000947975
            assert ecoli_json.StarAMR."0".Genotype.equals("aph(3'')-Ib, aph(6)-Id, blaCTX-M-15, blaTEM-1B, dfrA7, gyrA (S83A), qacE, sul1, sul2, tet(A)")
            assert ecoli_json.StarAMR."0"."Predicted Phenotype".equals("streptomycin, kanamycin, ampicillin, ceftriaxone, trimethoprim, ciprofloxacin I/R, nalidixic acid, unknown[qacE_1_X68232], sulfisoxazole, tetracycline")
            assert ecoli_json.StarAMR."0".Plasmid.equals("IncQ1")
            assert ecoli_json.StarAMR."0".Scheme.equals("ecoli")
            assert ecoli_json.StarAMR."0"."Sequence Type".equals("678")
            assert ecoli_json.PointfinderDB.equals("escherichia_coli")
            assert ecoli_json.ECTyperSubtyping."0".Species.equals("Escherichia coli")
            assert ecoli_json.ECTyperSubtyping."0"."O-type".equals("O104")
            assert ecoli_json.ECTyperSubtyping."0"."H-type".equals("H4")
            assert ecoli_json.ECTyperSubtyping."0".Serotype.equals("O104:H4")
            assert ecoli_json.ECTyperSubtyping."0".Database.equals("v1.0 (11-03-2020)")
            assert ecoli_json.ECTyperSubtyping."0".QC.equals("PASS (REPORTABLE)")

            // parse final report tsv file
            def final_report_tmap = [:]
            def final_report_tsv = path("$launchDir/results/SummaryReport/final_report.tsv").readLines()
            final_report_tsv.each {
                def tokens = it.split("\t")
                final_report_tmap[tokens[0]] = tokens[1]
            }
            assert final_report_tsv[0] == "\tecoli_GCA_000947975"
            assert final_report_tmap."QUAST.0.Total length" == "5333525"
            assert final_report_tmap."QUAST.0.Largest contig" == "300823"
            assert final_report_tmap."QUAST.0.# contigs" == "187"
            assert final_report_tmap."QUAST.0.N50" == "122025"
            assert final_report_tmap."StarAMR.0.Genotype" == "aph(3'')-Ib, aph(6)-Id, blaCTX-M-15, blaTEM-1B, dfrA7, gyrA (S83A), qacE, sul1, sul2, tet(A)"
            assert final_report_tmap."StarAMR.0.Predicted Phenotype" == "streptomycin, kanamycin, ampicillin, ceftriaxone, trimethoprim, ciprofloxacin I/R, nalidixic acid, unknown[qacE_1_X68232], sulfisoxazole, tetracycline"
            assert final_report_tmap."StarAMR.0.Plasmid" == "IncQ1"
            assert final_report_tmap."StarAMR.0.Scheme" == "ecoli"
            assert final_report_tmap."StarAMR.0.Sequence Type" == "678"
            assert final_report_tmap."ECTyperSubtyping.0.Species" == "Escherichia coli"
            assert final_report_tmap."ECTyperSubtyping.0.O-type" == "O104"
            assert final_report_tmap."ECTyperSubtyping.0.H-type" == "H4"
            assert final_report_tmap."ECTyperSubtyping.0.Serotype" == "O104:H4"
            assert final_report_tmap."ECTyperSubtyping.0.Database" == "v1.0 (11-03-2020)"
            assert final_report_tmap."ECTyperSubtyping.0.QC" == "PASS (REPORTABLE)"

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            // output files
            assert iridanext_global.findAll { it.path == "SummaryReport/final_report.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "SummaryReport/final_report.tsv" }.size() == 1
            assert iridanext_samples.ecoli_GCA_000947975.findAll { it.path == "SummaryReport/ecoli_GCA_000947975_flat_sample.json.gz" }.size() == 1

            // output metadata
            def ecoli_metadata = iridanext_metadata.ecoli_GCA_000947975
            assert ecoli_metadata."Species" == "s__Escherichia coli"
            assert ecoli_metadata."QUAST.0.Total length" == "5333525"
            assert ecoli_metadata."QUAST.0.Largest contig" == "300823"
            assert ecoli_metadata."QUAST.0.# contigs" == "187"
            assert ecoli_metadata."QUAST.0.N50" == "122025"
            assert ecoli_metadata."StarAMR.0.Genotype" == "aph(3'')-Ib, aph(6)-Id, blaCTX-M-15, blaTEM-1B, dfrA7, gyrA (S83A), qacE, sul1, sul2, tet(A)"
            assert ecoli_metadata."StarAMR.0.Predicted Phenotype" == "streptomycin, kanamycin, ampicillin, ceftriaxone, trimethoprim, ciprofloxacin I/R, nalidixic acid, unknown[qacE_1_X68232], sulfisoxazole, tetracycline"
            assert ecoli_metadata."StarAMR.0.Plasmid" == "IncQ1"
            assert ecoli_metadata."StarAMR.0.Scheme" == "ecoli"
            assert ecoli_metadata."StarAMR.0.Sequence Type" == "678"
            assert ecoli_metadata."ECTyper Subtyping" == "Escherichia coli"
            assert ecoli_metadata."ECTyper O-Antigen" == "O104"
            assert ecoli_metadata."ECTyper H-Antigen" == "H4"
            assert ecoli_metadata."ECTyper Serotype" == "O104:H4"
            assert ecoli_metadata."ECTyper Database" == "v1.0 (11-03-2020)"
            assert ecoli_metadata."ECTyper Evidence" == "Based on 3 allele(s)"
            assert ecoli_metadata."ECTyper GeneCoverages (%)" == "100;100;100;"
            assert ecoli_metadata."ECTyper GeneIdentities (%)" == "100;100;100;"
            assert ecoli_metadata."ECTyper GeneScores" == "wzx:1;wzy:1;fliC:1;"
            assert ecoli_metadata."ECTyper QCFlag" == "PASS (REPORTABLE)"
            assert ecoli_metadata."ECTyper Warnings" == "-"
            assert ecoli_metadata."icd" == "136"
            assert ecoli_metadata."recA" == "7"
            assert ecoli_metadata."fumC" == "6"
            assert ecoli_metadata."adk" == "6"
            assert ecoli_metadata."gyrB" == "5"
            assert ecoli_metadata."purA" == "7"
            assert ecoli_metadata."mdh" == "9"
            assert ecoli_metadata."7 Gene ST" == "678"
            assert ecoli_metadata."7 Gene Scheme" == "ecoli"
        }
    }

    test("Test starting from assemblies salmonella") {
        tag "from_assemblies_salmonella"

        when {
            params {
                input = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/samplesheets/samplesheet-test-from-assemblies-salmonella.csv"
                outdir = "results"

                platform = "illumina"

                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/mash.msh"
                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"
                qt_min_contig_length = 1

                skip_bakta = true
                skip_mobrecon = true
                skip_checkm = true
                skip_raw_read_metrics = true
                skip_polishing = true

                skip_staramr = false
                skip_subtyping = false
                skip_allele_calling = false

                allele_scheme = "$baseDir/tests/data/databases/locidex_salm"

                max_memory = "2.GB"
                max_cpus = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            assert path("$launchDir/results/subtyping/sistr/salmonella_GCA_000008105-allele.fasta").exists()
            assert path("$launchDir/results/subtyping/sistr/salmonella_GCA_000008105-allele.json").exists()
            assert path("$launchDir/results/subtyping/sistr/salmonella_GCA_000008105-cgmlst.csv").exists()
            assert path("$launchDir/results/subtyping/sistr/salmonella_GCA_000008105.tab").exists()

            assert path("$launchDir/results/annotations/StarAMR/salmonella_GCA_000008105/plasmidfinder.tsv").exists()
            assert path("$launchDir/results/annotations/StarAMR/salmonella_GCA_000008105/pointfinder.tsv").exists()
            assert path("$launchDir/results/annotations/StarAMR/salmonella_GCA_000008105/resfinder.tsv").exists()
            assert path("$launchDir/results/annotations/StarAMR/salmonella_GCA_000008105/detailed_summary.tsv").exists()

            // Check Locidex outputs
            def acutal_mlst_profile = path("$launchDir/results/annotations/locidex/Report/salmonella_GCA_000008105.profile.mlst.json.gz")
            assert acutal_mlst_profile.exists()
            assert path("$launchDir/results/annotations/locidex/ExtractedSequences/salmonella_GCA_000008105/raw.extracted.seqs.fasta.gz").exists()
            assert path("$launchDir/results/annotations/locidex/Search/salmonella_GCA_000008105_seq_store.json.gz").exists()

            // comparing bytes, as both files are in gzipped
            def actual_mlst_profile_bytes = path("$launchDir/results/annotations/locidex/Report/salmonella_GCA_000008105.profile.mlst.json.gz").getBytes()
            def expected_mlst_profile_bytes = path("$baseDir/tests/data/profiles/salmonella_GCA_000008105.expected_profile.json.gz").getBytes()
            assert actual_mlst_profile_bytes.md5() == expected_mlst_profile_bytes.md5()


            // compare IRIDA Next JSON output
            assert path("$launchDir/results/iridanext.output.json").exists()
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_metadata.salmonella_GCA_000008105."meta.assembly" == true
            assert iridanext_metadata.salmonella_GCA_000008105."meta.hybrid" == false
            assert iridanext_metadata.salmonella_GCA_000008105."meta.single_end" == false

            assert iridanext_samples.salmonella_GCA_000008105.findAll {
                    it.path == "annotations/locidex/Report/salmonella_GCA_000008105.profile.mlst.json.gz"
                }.size() == 1

            // parse final report tsv file
            def final_report_tmap = [:]
            def final_report_tsv = path("$launchDir/results/SummaryReport/final_report.tsv").readLines()
            final_report_tsv.each {
                def tokens = it.split("\t")
                final_report_tmap[tokens[0]] = tokens[1]
            }

            // output files
            assert iridanext_global.findAll { it.path == "SummaryReport/final_report.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "SummaryReport/final_report.tsv" }.size() == 1

            // parse final report json file
            def final_report = path("$launchDir/results/SummaryReport/final_report.json").json
            def salmonella_json = final_report.salmonella_GCA_000008105.salmonella_GCA_000008105

            // Tests
            assert salmonella_json.SpeciesTopHit == "s__Salmonella enterica"
            assert iridanext_metadata.salmonella_GCA_000008105."Species" == "s__Salmonella enterica"
            assert final_report_tmap.SpeciesTopHit == "s__Salmonella enterica"

            assert salmonella_json.QUAST."0"."Total length" == "4944000"
            assert iridanext_metadata.salmonella_GCA_000008105."QUAST.0.Total length" == "4944000"
            assert final_report_tmap."QUAST.0.Total length" == "4944000"

            assert salmonella_json.QUAST."0"."Largest contig" == "4755700"
            assert iridanext_metadata.salmonella_GCA_000008105."QUAST.0.Largest contig" == "4755700"
            assert final_report_tmap."QUAST.0.Largest contig" == "4755700"

            assert salmonella_json.QUAST."0"."# contigs" == "3"
            assert iridanext_metadata.salmonella_GCA_000008105."QUAST.0.# contigs" == "3"
            assert final_report_tmap."QUAST.0.# contigs" == "3"

            assert salmonella_json.QUAST."0"."N50" == "4755700"
            assert iridanext_metadata.salmonella_GCA_000008105."QUAST.0.N50" == "4755700"
            assert final_report_tmap."QUAST.0.N50" == "4755700"

            assert salmonella_json.StarAMR."0".Genotype == "aadA1, aadA2, aadA2, aph(3'')-Ib, aph(3')-Ia, blaCMY-2, blaTEM-1B, cmlA1, dfrA12, gyrA (D87N), gyrA (S83F), qacE, sul1, sul3, tet(A)"
            assert iridanext_metadata.salmonella_GCA_000008105."StarAMR.0.Genotype" == "aadA1, aadA2, aadA2, aph(3'')-Ib, aph(3')-Ia, blaCMY-2, blaTEM-1B, cmlA1, dfrA12, gyrA (D87N), gyrA (S83F), qacE, sul1, sul3, tet(A)"
            assert final_report_tmap."StarAMR.0.Genotype" == "aadA1, aadA2, aadA2, aph(3'')-Ib, aph(3')-Ia, blaCMY-2, blaTEM-1B, cmlA1, dfrA12, gyrA (D87N), gyrA (S83F), qacE, sul1, sul3, tet(A)"

            assert salmonella_json.StarAMR."0"."Predicted Phenotype" == "streptomycin, kanamycin, ampicillin, amoxicillin/clavulanic acid, cefoxitin, ceftriaxone, chloramphenicol, trimethoprim, ciprofloxacin I/R, nalidixic acid, unknown[qacE_1_X68232], sulfisoxazole, tetracycline"
            assert iridanext_metadata.salmonella_GCA_000008105."StarAMR.0.Predicted Phenotype" == "streptomycin, kanamycin, ampicillin, amoxicillin/clavulanic acid, cefoxitin, ceftriaxone, chloramphenicol, trimethoprim, ciprofloxacin I/R, nalidixic acid, unknown[qacE_1_X68232], sulfisoxazole, tetracycline"
            assert final_report_tmap."StarAMR.0.Predicted Phenotype" == "streptomycin, kanamycin, ampicillin, amoxicillin/clavulanic acid, cefoxitin, ceftriaxone, chloramphenicol, trimethoprim, ciprofloxacin I/R, nalidixic acid, unknown[qacE_1_X68232], sulfisoxazole, tetracycline"

            assert salmonella_json.StarAMR."0".Plasmid == "IncFIB(K), IncFIB(S), IncFII(S)"
            assert iridanext_metadata.salmonella_GCA_000008105."StarAMR.0.Plasmid" == "IncFIB(K), IncFIB(S), IncFII(S)"
            assert final_report_tmap."StarAMR.0.Plasmid" == "IncFIB(K), IncFIB(S), IncFII(S)"

            assert salmonella_json.StarAMR."0".Scheme == "senterica"
            assert iridanext_metadata.salmonella_GCA_000008105."StarAMR.0.Scheme" == "senterica"
            assert final_report_tmap."StarAMR.0.Scheme" == "senterica"

            assert salmonella_json.StarAMR."0"."Sequence Type" == "66"
            assert iridanext_metadata.salmonella_GCA_000008105."StarAMR.0.Sequence Type" == "66"
            assert final_report_tmap."StarAMR.0.Sequence Type" == "66"

            assert salmonella_json.SISTRSubtyping."0".serovar == "Choleraesuis"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR Serovar" == "Choleraesuis"
            assert final_report_tmap."SISTRSubtyping.0.serovar" == "Choleraesuis"

            assert salmonella_json.SISTRSubtyping."0".serogroup == "C1"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR Serogroup" == "C1"
            assert final_report_tmap."SISTRSubtyping.0.serogroup" == "C1"

            assert salmonella_json.SISTRSubtyping."0".serovar_antigen == "Hissar|Choleraesuis|Paratyphi C|Typhisuis|Chiredzi"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR Serovar Antigen" == "Hissar|Choleraesuis|Paratyphi C|Typhisuis|Chiredzi"
            assert final_report_tmap."SISTRSubtyping.0.serovar_antigen" == "Hissar|Choleraesuis|Paratyphi C|Typhisuis|Chiredzi"

            // other metadata for IRIDA Next
            assert iridanext_metadata.salmonella_GCA_000008105."QC Summary" == "[FAILED] Sample is likely contaminated, REISOLATION AND RESEQUENCING RECOMMENDED\nPassed Tests: 3/4\nSpecies ID: s__Salmonella enterica"
            //assert iridanext_metadata.salmonella_GCA_000008105."Downsampled" == "false"
            assert iridanext_metadata.salmonella_GCA_000008105."GC (%)" == "52.13"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR cgMLST ST" == "2572600197"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR cgMLST Found Loci" == "330"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR cgMLST Genome Match" == "ERR351246"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR cgMLST Matching Alleles" == "320"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR cgMLST Subspecies" == "enterica"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR H1" == "c"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR H2" == "1,5"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR Antigen" == "6,7"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR QC Message" == "INFO: Number of cgMLST330 loci found (n=330)"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR QC Status" == "PASS"
            assert iridanext_metadata.salmonella_GCA_000008105."SISTR Serovar cgMLST" == "Choleraesuis"
        }
    }

    test("Test starting from assemblies listeria") {
        tag "from_assemblies_listeria"

        when {
            params {
                input = "https://raw.githubusercontent.com/phac-nml/mikrokondo/dev/tests/data/samplesheets/samplesheet-test-from-assemblies-listeria.csv"
                outdir = "results"

                platform = "illumina"

                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/mash.msh"
                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"
                qt_min_contig_length = 1

                skip_bakta = true
                skip_mobrecon = true
                skip_checkm = true
                skip_raw_read_metrics = true
                skip_polishing = true

                skip_staramr = false
                skip_subtyping = false
                skip_allele_calling = true

                max_memory = "2.GB"
                max_cpus = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            assert path("$launchDir/results/subtyping/lissero/listeria_GCF_000196035.tsv").exists()

            assert path("$launchDir/results/annotations/StarAMR/listeria_GCF_000196035/plasmidfinder.tsv").exists()
            assert path("$launchDir/results/annotations/StarAMR/listeria_GCF_000196035/resfinder.tsv").exists()
            assert path("$launchDir/results/annotations/StarAMR/listeria_GCF_000196035/detailed_summary.tsv").exists()

            // compare IRIDA Next JSON output
            assert path("$launchDir/results/iridanext.output.json").exists()
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_metadata.listeria_GCF_000196035."meta.assembly" == true
            assert iridanext_metadata.listeria_GCF_000196035."meta.hybrid" == false
            assert iridanext_metadata.listeria_GCF_000196035."meta.single_end" == false

            // parse final report tsv file
            def final_report_tmap = [:]
            def final_report_tsv = path("$launchDir/results/SummaryReport/final_report.tsv").readLines()
            final_report_tsv.each {
                def tokens = it.split("\t")
                final_report_tmap[tokens[0]] = tokens[1]
            }

            // output files
            assert iridanext_global.findAll { it.path == "SummaryReport/final_report.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "SummaryReport/final_report.tsv" }.size() == 1

            // parse final report json file
            def final_report = path("$launchDir/results/SummaryReport/final_report.json").json
            def listeria_json = final_report.listeria_GCF_000196035.listeria_GCF_000196035

            // Tests
            assert listeria_json.SpeciesTopHit == "s__Listeria monocytogenes"
            assert iridanext_metadata.listeria_GCF_000196035."Species" == "s__Listeria monocytogenes"
            assert final_report_tmap.SpeciesTopHit == "s__Listeria monocytogenes"

            assert listeria_json.QUAST."0"."Total length" == "2944528"
            assert iridanext_metadata.listeria_GCF_000196035."QUAST.0.Total length" == "2944528"
            assert final_report_tmap."QUAST.0.Total length" == "2944528"

            assert listeria_json.QUAST."0"."Largest contig" == "2944528"
            assert iridanext_metadata.listeria_GCF_000196035."QUAST.0.Largest contig" == "2944528"
            assert final_report_tmap."QUAST.0.Largest contig" == "2944528"

            assert listeria_json.QUAST."0"."# contigs" == "1"
            assert iridanext_metadata.listeria_GCF_000196035."QUAST.0.# contigs" == "1"
            assert final_report_tmap."QUAST.0.# contigs" == "1"

            assert listeria_json.QUAST."0"."N50" == "2944528"
            assert iridanext_metadata.listeria_GCF_000196035."QUAST.0.N50" == "2944528"
            assert final_report_tmap."QUAST.0.N50" == "2944528"

            assert listeria_json.StarAMR."0".Genotype == "fosX"
            assert iridanext_metadata.listeria_GCF_000196035."StarAMR.0.Genotype" == "fosX"
            assert final_report_tmap."StarAMR.0.Genotype" == "fosX"

            assert listeria_json.StarAMR."0"."Predicted Phenotype" == "fosfomycin"
            assert iridanext_metadata.listeria_GCF_000196035."StarAMR.0.Predicted Phenotype" == "fosfomycin"
            assert final_report_tmap."StarAMR.0.Predicted Phenotype" == "fosfomycin"

            assert listeria_json.StarAMR."0".Plasmid == "None"
            assert iridanext_metadata.listeria_GCF_000196035."StarAMR.0.Plasmid" == "None"
            assert final_report_tmap."StarAMR.0.Plasmid" == "None"

            assert listeria_json.StarAMR."0".Scheme == "lmonocytogenes"
            assert iridanext_metadata.listeria_GCF_000196035."StarAMR.0.Scheme" == "lmonocytogenes"
            assert final_report_tmap."StarAMR.0.Scheme" == "lmonocytogenes"

            assert listeria_json.StarAMR."0"."Sequence Type" == "35"
            assert iridanext_metadata.listeria_GCF_000196035."StarAMR.0.Sequence Type" == "35"
            assert final_report_tmap."StarAMR.0.Sequence Type" == "35"

            assert listeria_json.LISSEROSubtyping."0".SEROTYPE == "1/2c, 3c"
            assert iridanext_metadata.listeria_GCF_000196035."LISSERO Serotype" == "1/2c, 3c"
            assert final_report_tmap."LISSEROSubtyping.0.SEROTYPE" == "1/2c, 3c"

            assert listeria_json.LISSEROSubtyping."0".PRS == "FULL"
            assert final_report_tmap."LISSEROSubtyping.0.PRS" == "FULL"

            assert listeria_json.LISSEROSubtyping."0".ORF2110 == "NONE"
            assert final_report_tmap."LISSEROSubtyping.0.ORF2110" == "NONE"

            assert iridanext_metadata.listeria_GCF_000196035."dat" == "1"
            assert iridanext_metadata.listeria_GCF_000196035."ldh" == "4"
            assert iridanext_metadata.listeria_GCF_000196035."cat" == "6"
            assert iridanext_metadata.listeria_GCF_000196035."abcZ" == "6"
            assert iridanext_metadata.listeria_GCF_000196035."bglA" == "5"
            assert iridanext_metadata.listeria_GCF_000196035."dapE" == "20"
            assert iridanext_metadata.listeria_GCF_000196035."lhkA" == "1"
            assert iridanext_metadata.listeria_GCF_000196035."7 Gene ST" == "35"
            assert iridanext_metadata.listeria_GCF_000196035."7 Gene Scheme" == "lmonocytogenes"
        }
    }

}
