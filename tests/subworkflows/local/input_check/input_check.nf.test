nextflow_workflow {
    name "Test workflow INPUT_CHECK"
    script "subworkflows/local/input_check.nf"
    workflow "INPUT_CHECK"
    tag "subworkflow"
    tag "input_check"

    test("Test input check") {
        tag "pass_input_screen"

        when {

            params {
                input = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/samplesheets/samplesheet-campy-staph.csv"
                outdir = "results"
                min_reads = 1
                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy-staph-ecoli.msh"
                mh_min_kmer = 1

                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"

                kraken2_db = "$baseDir/tests/data/kraken2/test"


                max_memory = "2.GB"
                max_cpus = 1
            }

        }

        then {
            assert workflow.success
            assert workflow.out.reads[0][0].id == 'CSE'
            assert workflow.out.reads[0][0].external_id == 'CSE'
            assert workflow.out.reads[0][0].sample == 'CSE'
            assert workflow.out.reads[0][0].hybrid == false
            assert workflow.out.reads[0][0].assembly == false
            assert workflow.out.reads[0][0].downsampled == false
            assert workflow.out.reads[0][0].single_end == false
            assert workflow.out.reads[0][0].merge == false
            assert workflow.out.reads[0][1][0].endsWith('campy-staph1.fq.gz')
            assert workflow.out.reads[0][1][1].endsWith('campy-staph2.fq.gz')

        }
    }

    test("Test reads are merged") {
    tag "pass_merge_reads"

        when {

            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-merge-test.csv"
                outdir = "results"
                min_reads = 1
                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy-staph-ecoli.msh"
                mh_min_kmer = 1
                skip_read_merging = false

                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"

                kraken2_db = "$baseDir/tests/data/kraken2/test"


                max_memory = "2.GB"
                max_cpus = 1
            }

        }

        then {
            assert workflow.success
            assert workflow.out.reads[0][0].id == 'CSE'
            assert workflow.out.reads[0][0].merge == true
            assert workflow.out.reads[0][1][0].endsWith("CSE_R1.merged.fastq.gz")
            assert path(workflow.out.reads[0][1][0]).linesGzip.size() == 12400
            assert workflow.out.reads[0][1][1].endsWith("CSE_R2.merged.fastq.gz")
            assert path(workflow.out.reads[0][1][1]).linesGzip.size() == 12400

            assert workflow.out.reads[1][0].id == 'un-merged'
            assert workflow.out.reads[1][0].merge == false
            assert workflow.out.reads[1][1][0].endsWith("metagenomic_reads1.fq.gz")
            assert workflow.out.reads[1][1][1].endsWith("metagenomic_reads2.fq.gz")
        }

    }

    test("Test external id is set") {
    tag "pass_set_external"

        when {

            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-set-ext-id.csv"
                outdir = "results"
                min_reads = 1
                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy-staph-ecoli.msh"
                mh_min_kmer = 1
                skip_read_merging = false

                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"

                kraken2_db = "$baseDir/tests/data/kraken2/test"


                max_memory = "2.GB"
                max_cpus = 1
            }

        }

        then {

            assert workflow.success
            assert workflow.out.reads[0][0].id == 'an_even_stronger_name_'
            assert workflow.out.reads[0][0].merge == false
            assert workflow.out.reads[1][0].id == 'better_faster_stronger_name'
            assert workflow.out.reads[1][0].merge == false
            assert workflow.out.reads[2][0].id == 'this_is_getting_ridiculous'
            assert workflow.out.reads[2][0].merge == true
            assert workflow.out.reads[2][1][0].endsWith("this_is_getting_ridiculous_R1.merged.fastq.gz")
            assert workflow.out.reads[2][1][1].endsWith("this_is_getting_ridiculous_R2.merged.fastq.gz")
        }

    }

    test("Test make ids unique") {
    tag "pass_make_ids_unique"

        when {

            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-make-names-unique.csv"
                outdir = "results"
                min_reads = 1
                mash_sketch = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy-staph-ecoli.msh"
                mh_min_kmer = 1
                skip_read_merging = true
                dehosting_idx = "https://github.com/phac-nml/mikrokondo/raw/dev/tests/data/databases/campy.mmi"

                kraken2_db = "$baseDir/tests/data/kraken2/test"


                max_memory = "2.GB"
                max_cpus = 1
            }

        }

        then {

            assert workflow.success
            assert workflow.out.reads[0][0].id == 'ha'
            assert workflow.out.reads[1][0].id == 'ha_ha'
            assert workflow.out.reads[2][0].id == 'ha_ha_ha'
            assert workflow.out.reads[3][0].id == 'ha_ha_ha_ha'
        }

    }


}
