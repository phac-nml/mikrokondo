nextflow_workflow
 {
    name "Test of locidex sub-workflow"
    script "subworkflows/local/locidex.nf"
    workflow "LOCIDEX"
    tag "subworkflows"
    tag "locidex"

    test("Test of Locidex"){
        /*
            The locidex workflow take in the following channels
            contigs: val(meta), path(contigs)
            top_hit: val(meta), val(top_hit)
            Both metadata channels affect just need to contain ID
        */
        when{
            workflow {
                """
                    input[0] = Channel.of(
                        [[id: "ST120"], file("$baseDir/tests/data/fake_contigs/vibrio_cholerae/st_120.fa.gz")],
                        [[id: "ST176"], file("$baseDir/tests/data/fake_contigs/vibrio_cholerae/st_176.fa.gz")],
                        [[id: "ST190"], file("$baseDir/tests/data/fake_contigs/vibrio_cholerae/st_190.fa.gz")],
                        [[id: "ST243"], file("$baseDir/tests/data/fake_contigs/vibrio_cholerae/st_243.fa.gz")],
                        [[id: "ST25"] , file("$baseDir/tests/data/fake_contigs/vibrio_cholerae/st_25.fa.gz")],
                        [[id: "ST284"], file("$baseDir/tests/data/fake_contigs/vibrio_cholerae/st_284.fa.gz")],
                        [[id: "ST307"], file("$baseDir/tests/data/fake_contigs/vibrio_cholerae/st_307.fa.gz")],
                        [[id: "ST32"] , file("$baseDir/tests/data/fake_contigs/vibrio_cholerae/st_32.fa.gz")],
                        [[id: "ST61"] , file("$baseDir/tests/data/fake_contigs/vibrio_cholerae/st_61.fa.gz")],
                        [[id: "ST8"]  , file("$baseDir/tests/data/fake_contigs/vibrio_cholerae/st_8.fa.gz")],
                        [[id: "Nothing"]  , file("$baseDir/tests/data/fake_contigs/vibrio_cholerae/st_8.fa.gz")],
                    )
                    input[1] = Channel.of(
                        [[id: "ST120"], 's_Vibrio cholerae'],
                        [[id: "ST176"], 's_Vibrio cholerae'],
                        [[id: "ST190"], 's_Vibrio cholerae'],
                        [[id: "ST243"], 's_Vibrio cholerae'],
                        [[id: "ST25"] , 's_Vibrio cholerae'],
                        [[id: "ST284"], 's_Vibrio cholerae'],
                        [[id: "ST307"], 's_Vibrio cholerae'],
                        [[id: "ST32"] , 's_Vibrio cholerae'],
                        [[id: "ST61"] , 's_Vibrio cholerae'],
                        [[id: "ST8"]  , 's_Vibrio cholerae'],
                        [[id: "Nothing"]  , 'No species identified'],
                    )
                """
            }
            params {
                outdir = "results"
                max_memory = "2.GB"
                max_cpus = 1
                lx_allele_database = "${projectDir}/tests/data/databases/locidex_dbs"
                lx_report_max_stop = 100
                locidex_summary { reportable_alleles = ["mdh", "gyrB", "pntA", "purM"] }
            }
        }
        then {
            assert workflow.success
            assert path("$launchDir/results").exists()
            def st_names = ["ST120", "ST176", "ST190", "ST243", "ST25", "ST284", "ST307", "ST32", "ST61", "ST8"]

            for(i in st_names){
                def select_string = "$launchDir/results/Assembly/Subtyping/Locidex/Select/${i}.${i}_SelectedLocidexConfig.locidex.db.json"
                def extract_string = "$launchDir/results/Assembly/Subtyping/Locidex/Extract/${i}/${i}.raw.locidex.extract.extracted.seqs.subtyping.fasta.gz"
                def search_string = "$launchDir/results/Assembly/Subtyping/Locidex/Search/${i}.locidex.seq_store.json.gz"
                def report_string = "$launchDir/results/Assembly/Subtyping/Locidex/Report/${i}.locidex.report.profile.mlst.subtyping.json.gz"
                def summary_string = "$launchDir/results/Assembly/Subtyping/Locidex/Summary/${i}.locidex.summary.json"
                assert path(select_string).exists()
                def selected_data = path(select_string).json
                assert selected_data.path == "locidex_vc"
                assert selected_data.config.db_name == "Vibrio cholerae"
                assert selected_data.config.db_desc == "The PubMLST 7 gene mlst database for vibrio cholerae"
                assert selected_data.config.db_date == "2024-07-30"
                assert path(extract_string).exists()
                assert path(search_string).exists()
                assert path(search_string).exists()
                assert path(summary_string).exists()
                assert path(summary_string).json."ReportableAlleles".findAll{['mdh', 'gyrB', 'pntA', 'purM'].contains(it.key)}.size() == 4
            }

        }
    }

    test("Test of No Selection Locidex"){
        tag "locidex_fail"
        /*
            The locidex workflow take in the following channels
            contigs: val(meta), path(contigs)
            top_hit: val(meta), val(top_hit)
            Both metadata channels affect just need to contain ID
        */
        when{
            workflow {
                """
                    input[0] = Channel.of(
                        [[id: "Nothing"]  , file("$baseDir/tests/data/fake_contigs/vibrio_cholerae/st_8.fa.gz")],
                    )
                    input[1] = Channel.of(
                        [[id: "Nothing"]  , 'No species identified'],
                    )
                """
            }
            params {
                outdir = "results"
                max_memory = "2.GB"
                max_cpus = 1
                lx_allele_database = "${projectDir}/tests/data/databases/locidex_dbs"
                lx_report_max_stop = 100
                locidex_summary { reportable_alleles = ["mdh", "gryB", "pntA", "purM"] }
            }
        }
        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            def fail_names = ["Nothing"]
            for(i in fail_names){
                def select_string = "$launchDir/results/Assembly/Subtyping/Locidex/Select/${i}.${i}_SelectedLocidexConfig.locidex.db.json"
                def extract_string = "$launchDir/results/Assembly/Subtyping/Locidex/Extract/${i}/${i}.raw.locidex.extract.extracted.seqs.subtyping.fasta.gz"
                def search_string = "$launchDir/results/Assembly/Subtyping/Locidex/Search/${i}.locidex.seq_store.json.gz"
                def report_string = "$launchDir/results/Assembly/Subtyping/Locidex/Report/${i}.locidex.report.profile.mlst.subtyping.json.gz"
                def summary_string = "$launchDir/results/Assembly/Subtyping/Locidex/Summary/${i}.locidex.summary.json"
                assert path(select_string).exists()
                def selection_json = path(select_string).json
                assert selection_json['db_name'] == 'No Database Selected'
                assert selection_json['db_date'] == 'No Database Selected'
                assert selection_json['db_version'] == 'No Database Selected'
                assert !path(extract_string).exists()
                assert !path(search_string).exists()
                assert !path(report_string).exists()
                assert !path(summary_string).exists()

            }

        }
    }
}
