/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

// TODO tie all ext.args to nextflow.config
// TODO mix in versions of all outputs

process {
    if(params.slurm_p){
        executor = 'slurm'
        queueSize = 10
        submitRateLimit = '100/2min'
        clusterOptions = "-p ${params.slurm_profile}"
    }


    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: LOCIDEX_EXTRACT {
        ext.parameters = params.locidex
        publishDir = [
            mode: params.publish_dir_mode,
            path: "${params.outdir}/annotations/locidex/ExtractedSequences",
            pattern: "*/*${params.locidex.extracted_seqs_suffix}"
        ]
    }

    withName: LOCIDEX_SEARCH {
        ext.parameters = params.locidex
        publishDir = [
            [
                mode: params.publish_dir_mode,
                path: "${params.outdir}/annotations/locidex/Search",
                pattern: "*${params.locidex.seq_store_suffix}"
            ],
            [
                mode: params.publish_dir_mode,
                path: "${params.outdir}/annotations/locidex/Search",
                pattern: "*${params.locidex.gbk_suffix}"
            ]
        ]
    }

    withName: LOCIDEX_REPORT {
        ext.parameters = params.locidex
        publishDir = [
            mode: params.publish_dir_mode,
            path: "${params.outdir}/annotations/locidex/Report",
            pattern: "*${params.locidex.report_suffix}"
        ]
    }

    withName: REPORT{
            executor = 'local'
            cache = 'false' // Resume does not work on module, if enabled a warning is thrown
            errorStrategy = "terminate"
            publishDir = [
                mode: params.publish_dir_mode,
                path: "${params.outdir}/SummaryReport",
                pattern: "final_report.json"
            ]
    }

    withName: IDENTIFY_POINTDB {
        executor = 'local'
        errorStrategy = "ignore"
    }

    withName: REPORT_AGGREGATE {
        ext.parameters = params.python3
        cache = 'false' // Resume does not work on module, if enabled a warning is thrown
        errorStrategy = "terminate"
        publishDir = [
            [
                mode: params.publish_dir_mode,
                path: "${params.outdir}/SummaryReport",
                pattern: "*.tsv"
            ],
            [
                mode: params.publish_dir_mode,
                path: "${params.outdir}/SummaryReport",
                pattern: "*.json"
            ]

        ]
    }

    //withName: SHIGATYPER {
    //    ext.parameters = params.shigatyper
    //    //container = params.shigatyper.container
    //    stageInMode = params.stage_in_mode
    //    // scratch = false
    //    publishDir = [
    //        path: { "${params.outdir}/subtyping/shigatyper" },
    //        mode: params.publish_dir_mode,
    //    ]
    //}

    //withName: FASTQSCAN {
    //    container = params.fastqscan.container
    //    ext.args = params.fastqscan.args
    //    errorStrategy = 'terminate'
    //    publishDir = [
    //        mode: params.publish_dir_mode,
    //        path: "${params.outdir}/ReadQuality/raw_reads",
    //        pattern: "*.json"
    //    ]
    //}

    withName: BIN_KRAKEN2 {
        ext.parameters = params.python3
        maxForks = 20;
        publishDir = [
            mode: params.publish_dir_mode,
            path: "${params.outdir}/${params.spades.outdir}/taxon_determination/kraken2/binned_contigs",
            pattern: "*${params.kraken_bin.fasta_ext}"
        ]
    }


    withName: COMBINE_DATA {
        ext.parameters = params.coreutils
        //container = params.coreutils.container
        publishDir = [
            enabled: false
        ]
    }


    withName: GZIP_FILES {
        ext.parameters = params.coreutils
        publishDir = [
            [
                mode: params.publish_dir_mode,
                path: "${params.outdir}/SummaryReport",
                pattern: "*.gz"
            ]
        ]
    }

    withName: CHECK_ONT {
        ext.parameters = params.python3
        publishDir = [
            enabled: false
        ]

    }

    withName: PARSE_MASH {
        ext.parameters = params.python3
        errorStrategy = { task.exitStatus == 255 || task.exitStatus == 1 ? 'ignore' : 'finish'}
        publishDir = [
            enabled: false
        ]
    }

    withName: PARSE_KRAKEN {
        ext.parameters = params.python3
        errorStrategy = { task.exitStatus == 255 || task.exitStatus == 1 ? 'ignore' : 'finish'}
        publishDir = [
            enabled: false
        ]
    }

    withName: READ_SCAN {
        errorStrategy = "terminate"
        ext.parameters = params.python3
        publishDir = [
            [
                mode: params.publish_dir_mode,
                path: "${params.outdir}/ReadQuality/RawReadData",
                pattern: "*.json"
            ],
        ]
    }

    withName: PARSE_FASTP {
        executor = 'local'
        publishDir = [
            enabled: false
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            [
                path: "${params.outdir}/ReadQuality/fastqc",
                mode: params.publish_dir_mode,
                pattern: "*{${params.fastqc.html_ext},${params.fastqc.zip_ext}}",
            ]
        ]
    }

    withName: SEQKIT_STATS {
        ext.args = ""
        ext.parameters = params.seqkit
        stageInMode = params.stage_in_mode
        publishDir = [
            [
                path: "${params.outdir}/${params.spades.outdir}/quality/seqkit_stats/",
                mode: params.publish_dir_mode,
                pattern: "*${params.seqkit.report_ext}"
            ]
        ]
    }

    withName: SEQKIT_FILTER {
        ext.args = ""
        ext.parameters = params.seqkit
        stageInMode = params.stage_in_mode
        publishDir = [
            [
                path: "${params.outdir}/${params.spades.outdir}/length_filtered_contigs/",
                mode: params.publish_dir_mode,
                pattern: "*${params.seqkit.fasta_ext}"
            ]
        ]
    }

    withName: SEQTK_SAMPLE {
        ext.args = ""
        ext.parameters = params.seqtk
        stageInMode = params.stage_in_mode
        // scratch = false
        publishDir = [
            [
                path: "${params.outdir}/ReadQuality/SubSampledReads",
                mode: params.publish_dir_mode,
                pattern: "*${params.seqtk.reads_ext}"
            ]
        ]
    }


    withName: SEQTK_SIZE {
        ext.args = ""
        ext.parameters = params.seqtk_size
        stageInMode = params.stage_in_mode
        // scratch = false
        publishDir = [
            [
                path: "${params.outdir}/ReadQuality/SubSampledReads/BaseCounts",
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ]
        ]
    }

    //withName: SEQTK_FASTA_FASTQ {
    //    ext.args = ""
    //    ext.parameters = params.seqtk
    //    //container = params.seqtk.container
    //    stageInMode = params.stage_in_mode
    //    // scratch = false
    //    publishDir = [
    //        [
    //            path: "${params.outdir}/subtyping/shigatyper",
    //            mode: params.publish_dir_mode,
    //            pattern: "*${params.seqtk.assembly_fastq}"
    //        ]
    //    ]
    //}

    withName: QUAST {
        ext.args = params.quast.args
        ext.parameters = params.quast
        stageInMode = params.stage_in_mode
        // scratch = false
        errorStrategy = { task.attempt <= task.maxRetries ? sleep(Math.pow(2, task.attempt) * 200 as long) &&  'retry' : 'ignore' }
        maxForks = 10 // Quast can get overloaded by job subs, so needs to be limited
        publishDir = [
            [
                path: "${params.outdir}/${params.spades.outdir}/quality/${params.quast.suffix}",
                mode: params.publish_dir_mode,
                pattern: "*/*"
            ]
        ]

    }

    withName: CHECKM_LINEAGEWF {
        ext.args = ""
        //container = params.checkm.container
        ext.parameters = params.checkm
        stageInMode = params.stage_in_mode
        errorStrategy = { task.attempt <= task.maxRetries ? sleep(Math.pow(2, task.attempt) * 200 as long) && 'retry' : 'finish' }
        // scratch = false
        publishDir = [
            [
                path: "${params.outdir}/${params.spades.outdir}/quality/${params.checkm.folder_name}",
                mode: params.publish_dir_mode,
                pattern: "*/*"
            ]
        ]
    }

    withName: BANDAGE_IMAGE {
        ext.args = ""
        //container = params.bandage.container
        ext.parameters = params.bandage
        errorStrategy = { task.attempt <= task.maxRetries ? sleep(Math.pow(2, task.attempt) * 200 as long) && 'retry' : 'ignore' }
        stageInMode = params.stage_in_mode
        // scratch = false
        publishDir = [
            [
                path: "${params.outdir}/${params.spades.outdir}/quality/${params.bandage.outdir}",
                mode: params.publish_dir_mode,
                pattern: "*${params.bandage.svg_ext}"
            ]
        ]
    }

    withName: KRAKEN {
        ext.args = ""
        //container = params.kraken.container
        ext.parameters = params.kraken
        // scratch = false
        stageInMode = params.stage_in_mode
        publishDir = [
            [
                path: "${params.outdir}/${params.spades.outdir}/taxon_determination/kraken2/${params.kraken.classified_suffix}",
                mode: params.publish_dir_mode,
                pattern: "*.${params.kraken.classified_suffix}*"

            ],
            [
                path: "${params.outdir}/${params.spades.outdir}/taxon_determination/kraken2/${params.kraken.unclassified_suffix}",
                mode: params.publish_dir_mode,
                pattern: "*.${params.kraken.unclassified_suffix}*"
            ],
            [
                path: "${params.outdir}/${params.spades.outdir}/taxon_determination/kraken2/${params.kraken.report_suffix}",
                mode: params.publish_dir_mode,
                pattern: "*.kraken2.${params.kraken.report_suffix}.txt"
            ],
            [
                path: "${params.outdir}/${params.spades.outdir}/taxon_determination/kraken2/${params.kraken.output_suffix}",
                mode: params.publish_dir_mode,
                pattern: "*.${params.kraken.output_suffix}.txt"
            ]

        ]
    }


    withName: MASH_ESTIMATE {
        ext.parameters = params.mash
        // scratch = false
        maxForks = 20
        maxRetries = 3
        maxErrors = 3
        stageInMode = params.stage_in_mode
            publishDir = [
                [
                    path: "${params.outdir}/ReadQuality/mash_sketch",
                    mode: params.publish_dir_mode,
                    pattern: "*${params.mash.sketch_ext}"
                ]
            ]

    }

    withName: MLST {
        //container = params.mlst.container
        ext.parameters = params.mlst
        // scratch = false
        stageInMode = params.stage_in_mode
        errorStrategy = 'ignore'
        publishDir = [
                [
                    path: "${params.outdir}/assembly/7GeneMLST",
                    mode: params.publish_dir_mode,
                    pattern: "*${params.mlst.json_ext}"
                ]
            ]

    }

    withName: STARAMR_DUMP_DB_VERSIONS {
        ext.parameters = params.staramr
        ext.args = params.staramr.args
        errorStrategy = 'ignore'
        publishDir = [
            [
                path: "${params.outdir}/annotations/StarAMR",
                mode: params.publish_dir_mode,
            ]
        ]
    }

    withName: STARAMR {
        ext.parameters = params.staramr
        ext.args = params.staramr.args
        errorStrategy = 'ignore'
        publishDir = [
                [
                    path: "${params.outdir}/annotations/StarAMR",
                    mode: params.publish_dir_mode,
                    pattern: "*/*"
                ]
            ]
    }

    withName: MOBSUITE_RECON {
        ext.parameters = params.mobsuite_recon
        stageInMode = params.stage_in_mode
        errorStrategy = 'ignore'
        ext.args = params.mobsuite_recon.args
        publishDir = [
                [
                    path: "${params.outdir}/annotations/mobrecon/",
                    mode: params.publish_dir_mode,
                    pattern: "*/*"
                ]
            ]
    }

    withName: MASH_SKETCH {
        //container = params.mash.container
        maxForks = 20
        ext.parameters = params.mash
        // scratch = false
        maxRetries = 3
        maxErrors = 3
        stageInMode = params.stage_in_mode
        // No publishing as the way this is being used will create MASSIVE amounts of files
    }


    withName: MASH_PASTE {
        //container = params.mash.container
        ext.parameters = params.mash
        // scratch = false
        stageInMode = params.stage_in_mode
        publishDir = [
            [
                path: "${params.outdir}/sketch",
                mode: params.publish_dir_mode,
                pattern: "*${params.mash.sketch_ext}"
            ]
        ]
    }

    withName: MASH_SCREEN {
        def dir_out = null
        errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
        maxForks = 20
        maxErrors = 3
        //dir_out =  process.toString().contains("QC_READS") ? "ReadQuality/${params.mash.output_dir}/mash" : "taxon_determination/mash"
        ext.args = "-w"
        //container = params.mash.container
        ext.parameters = params.mash
        // scratch = false
        stageInMode = params.stage_in_mode
        publishDir = [
            [
                path: "${params.outdir}/ReadQuality/${params.mash.output_dir}/mash",
                mode: params.publish_dir_mode,
                pattern: "*${params.mash.output_reads_ext}"
            ],
            [
                path: "${params.outdir}/${params.spades.outdir}/taxon_determination/mash",
                mode: params.publish_dir_mode,
                pattern: "*${params.mash.output_taxa_ext}"
            ]
        ]
    }

    withName: PARSE_KAT {
        // scratch = false
        ext.parameters = params.python3
        executor = 'local'
        errorStrategy = "terminate"

    }

    withName: REMOVE_CONTAMINANTS {
        ext.args = "-a" // output sam format in minimap2
        ext.parameters = params.r_contaminants
        //container = params.r_contaminants.container
        // scratch = false
        stageInMode = params.stage_in_mode
        publishDir = [
            [
                path: { "${params.outdir}/ReadQuality/${params.r_contaminants.output_dir}"},
                mode: params.publish_dir_mode,
                pattern: "*.gz" // specifying this outside of config as yet to handle singletons TODO decide on singleton usage
            ]
        ]
    }

    withName: FLYE_ASSEMBLE {
        errorStrategy = { task.exitStatus in [140] ? 'retry' : 'ignore'}
        //container = params.flye.container
        ext.parameters = params.flye
        ext.args = params.flye.args
        maxRetries = 3
        // scratch = false
        publishDir = [
            [
                path: "${params.outdir}/${params.spades.outdir}/flye/contigs",
                mode: params.publish_dir_mode,
                pattern: "*${params.flye.fasta_ext}"
            ],
            [
                path: "${params.outdir}/${params.spades.outdir}/flye/graphs",
                mode: params.publish_dir_mode,
                pattern: "*${params.flye.gfa_ext}"
            ],
            [   path: "${params.outdir}/${params.spades.outdir}/flye/gv",
                mode: params.publish_dir_mode,
                pattern: "*${params.flye.gv_ext}"
            ],
            [
                path: "${params.outdir}/${params.spades.outdir}/flye/summary",
                mode: params.publish_dir_mode,
                pattern: "*${params.flye.txt_ext}"
            ],
            [
                path: "${params.outdir}/${params.spades.outdir}/flye/log",
                mode: params.publish_dir_mode,
                pattern: "*${params.flye.log_ext}"
            ],
            [
                path: "${params.outdir}/${params.spades.outdir}/flye/json",
                mode: params.publish_dir_mode,
                pattern: "*${params.flye.json_ext}"
            ]
        ]
    }


    withName: SPADES_ASSEMBLE {
        maxRetries = 3
        ext.args = ""
        ext.parameters = params.spades
        errorStrategy = 'ignore'
        //errorStrategy = { task.attempt <= task.maxRetries && sleep(Math.pow(2, task.attempt) * 200 as long) ? 'retry' : 'ignore' }
        // scratch = false
        publishDir = [
            [
                path: "${params.outdir}/${params.spades.outdir}/spades/scaffolds/",
                mode: params.publish_dir_mode,
                pattern: "*${params.spades.scaffolds_ext}"
            ],
            [
                path: "${params.outdir}/${params.spades.outdir}/spades/contigs/",
                mode: params.publish_dir_mode,
                pattern: "*${params.spades.contigs_ext}"
            ],
            [
                path: "${params.outdir}/${params.spades.outdir}/spades/transcripts/",
                mode: params.publish_dir_mode,
                pattern: "*${params.spades.transcripts_ext}"
            ],
            [
                path: "${params.outdir}/${params.spades.outdir}/spades/gene_clusters/",
                mode: params.publish_dir_mode,
                pattern: "*${params.spades.gene_clusters_ext}"
            ],
            [
                path: "${params.outdir}/${params.spades.outdir}/spades/logs/",
                mode: params.publish_dir_mode,
                pattern: "*${params.spades.log_ext}"
            ],
            [
                path: "${params.outdir}/${params.spades.outdir}/spades/graphs/",
                mode: params.publish_dir_mode,
                pattern: "*${params.spades.assembly_graphs_ext}"
            ]
        ]
    }



    withName: UNICYCLER_ASSEMBLE {
        ext.args = ""
        //container = params.unicycler.container
        ext.parameters = params.unicycler
        // scratch = false
        publishDir = [
            [
                path: { "${params.outdir}/${params.spades.outdir}/${params.unicycler.outdir}/scaffolds"},
                mode: params.publish_dir_mode,
                pattern: "*${params.unicycler.scaffolds_ext}"
            ],
            [
                path: { "${params.outdir}/${params.spades.outdir}/${params.unicycler.outdir}/assembly" },
                mode: params.publish_dir_mode,
                pattern: "*${params.unicycler.assembly_ext}"
            ],
            [
                path: { "${params.outdir}/${params.spades.outdir}/${params.unicycler.outdir}/logs" },
                mode: params.publish_dir_mode,
                pattern: "*${params.unicycler.log_ext}"
            ]
        ]
    }


    withName: FASTP_TRIM {
        //ext.args = ""
        //container = params.fastp.container
        ext.parameters = params.fastp
        // scratch = false
        publishDir = [
                [
                    path: { "${params.outdir}/ReadQuality/fastp/trimmed_reads"},
                    mode: params.publish_dir_mode,
                    pattern: "*${params.fastp.fastq_ext}"
                ],
                [
                    path: { "${params.outdir}/ReadQuality/fastp/reports"},
                    mode: params.publish_dir_mode,
                    pattern: "*{${params.fastp.json_ext},${params.fastp.html_ext}}"
                ]

        ]
    }

    withName: CHOPPER_TRIM {
        ext.args = "-q ${params.chopper.quality} -l ${params.chopper.minlength}"
        //container = params.chopper.container
        ext.parameters = params.chopper
        // scratch = false
        stageInMode = params.stage_in_mode
        publishDir = [
            [
                path: { "${params.outdir}/ReadQuality/chopper/trimmed_reads"},
                mode: params.publish_dir_mode,
                pattern: "*${params.chopper.fastq_ext}"
            ]
        ]
    }


    withName: MINIMAP2_INDEX {
        ext.args = ""
        //container = params.minimap2.container
        ext.parameters = params.minimap2
        // scratch = false
        stageInMode = params.stage_in_mode
        publishDir = [
            enabled: false
        ]
    }

    withName: MINIMAP2_MAP {
        ext.args = ""
        //container = params.minimap2.container
        ext.parameters = params.minimap2
        // scratch = false
        stageInMode = params.stage_in_mode
        publishDir = [
            enabled: false
            //[
            //    path: { "${params.outdir}/${params.spades.outdir}/minimap2/${params.minimap2.mapped_outdir}" },
            //    mode: params.publish_dir_mode,
            //    pattern: "*{${params.minimap2.mapped_paf_ext},${params.minimap2.mapped_sam_ext}}"
            //]
        ]
    }

    withName: SAM_TO_BAM {
        //container = params.samtools.container
        ext.parameters = params.samtools
        // scratch = false
        stageInMode = params.stage_in_mode
        publishDir = [
            enabled: false
        ]
    }

    withName: RACON_POLISH {
        ext.args = ""
        //container = params.racon.container
        ext.parameters = params.racon
        // scratch = false
        stageInMode = params.stage_in_mode
        publishDir = [
            [
                path: { "${params.outdir}/${params.spades.outdir}/${params.racon.outdir}/racon/racon_consensus" },
                mode: params.publish_dir_mode,
                pattern: "*${params.racon.consensus_ext}"
            ]
        ]
    }

    withName: PILON_POLISH {
        ext.args = ""
        stageInMode = params.stage_in_mode
        // scratch = false
        //container = params.pilon.container
        ext.parameters = params.pilon
        publishDir = [
            [
                path: { "${params.outdir}/${params.spades.outdir}/${params.racon.outdir}/${params.pilon.outdir}/fasta" },
                mode: params.publish_dir_mode,
                pattern: "*${params.pilon.fasta_ext}"
            ],
            [
                path: { "${params.outdir}/${params.spades.outdir}/${params.racon.outdir}/${params.pilon.outdir}/vcf" },
                mode: params.publish_dir_mode,
                pattern: "*${params.pilon.vcf_ext}"
            ],
            [
                path: { "${params.outdir}/${params.spades.outdir}/${params.racon.outdir}/${params.pilon.outdir}/changes" },
                mode: params.publish_dir_mode,
                pattern: "*${params.pilon.changes_ext}"
            ]
        ]
    }

    withName: PILON_ITER {
        ext.args = ""
        stageInMode = params.stage_in_mode
        // scratch = false
        ext.parameters = params.pilon_iterative
        maxRetries = 3
        errorStrategy = { task.attempt <= task.maxRetries ? sleep(Math.pow(2, task.attempt) * 200 as long) &&  'retry' : 'ignore' }
        publishDir = [
            [
                path: { "${params.outdir}/${params.spades.outdir}/${params.racon.outdir}/${params.pilon_iterative.outdir}/fasta" },
                mode: params.publish_dir_mode,
                pattern: "*${params.pilon_iterative.fasta_ext}"
            ],
            [
                path: { "${params.outdir}/${params.spades.outdir}/${params.racon.outdir}/${params.pilon_iterative.outdir}/vcf" },
                mode: params.publish_dir_mode,
                pattern: "*${params.pilon_iterative.vcf_ext}"
            ],
            [
                path: { "${params.outdir}/${params.spades.outdir}/${params.racon.outdir}/${params.pilon_iterative.outdir}/changes" },
                mode: params.publish_dir_mode,
                pattern: "*${params.pilon_iterative.changes_ext}"
            ],
            [
                path: { "${params.outdir}/${params.spades.outdir}/${params.racon.outdir}/${params.pilon_iterative.outdir}/bams" },
                mode: params.publish_dir_mode,
                pattern: "*${params.pilon_iterative.bam_ext}"
            ]
        ]
    }

    withName: KAT_HIST {
        ext.args = ""
        stageInMode = params.stage_in_mode
        // scratch = false
        errorStrategy = "finish"
        //container = params.kat.container
        ext.parameters = params.kat
        publishDir = [
            [
                path: { "${params.outdir}/ReadQuality/kat/hist/histogram" },
                mode: params.publish_dir_mode,
                pattern: "*${params.kat.hist_ext}"
            ],
            [
                path: { "${params.outdir}/ReadQuality/kat/hist/json" },
                mode: params.publish_dir_mode,
                pattern: "*${params.kat.json_ext}"
            ],
            [
                path: { "${params.outdir}/ReadQuality/kat/hist/png" },
                mode: params.publish_dir_mode,
                pattern: "*${params.kat.png_ext}"
            ]
        ]
    }

    withName: MEDAKA_POLISH{
        ext.args = ""
        cache = 'lenient'
        stageInMode = params.stage_in_mode
        // scratch = false
        ext.parameters = params.medaka
        maxRetries = 3
        publishDir = [
            [
                path: { "${params.outdir}/${params.spades.outdir}/${params.racon.outdir}/${params.medaka.outdir}" },
                mode: params.publish_dir_mode,
                pattern: "*${params.medaka.fasta_ext}"
            ]
        ]
    }

    withName: BAKTA_DB_DOWNLOAD {
        // scratch = false
        ext.parameters = params.bakta
        stageInMode = params.stage_in_mode
    }

    withName: BAKTA_ANNOTATE {
        // scratch = false // bakta uses its own temp dir so things get weird
        errorStrategy = 'ignore' // Some samples do not run through MikroKondo
        ext.parameters = params.bakta
        ext.args = params.bakta.args
        stageInMode = params.stage_in_mode
        publishDir = [
            [
                path: { "${params.outdir}/annotations/bakta/" },
                mode: params.publish_dir_mode,
            ]
        ]

    }

    withName: ABRICATE {
        errorStrategy = 'ignore'
        ext.args = params.abricate.args
        ext.parameters = params.abricate
        stageInMode = params.stage_in_mode
        publishDir = [
            [
                path: { "${params.outdir}/annotations/abricate/" },
                mode: params.publish_dir_mode,
            ]
        ]
    }

    withName: ECTYPER {
        //container = params.ectyper.container
        ext.parameters = params.ectyper
        stageInMode = params.stage_in_mode
        ext.args = params.ectyper.args
        time = '30m'
        // scratch = false
        publishDir = [
            path: { "${params.outdir}/subtyping/ectyper" },
            mode: params.publish_dir_mode,
            pattern: "*/*"
        ]
    }

    withName: KLEBORATE {
        ext.parameters = params.kleborate
        stageInMode = params.stage_in_mode
        // scratch = false
        publishDir = [
            path: { "${params.outdir}/subtyping/kleborate" },
            mode: params.publish_dir_mode,
            pattern: "*${params.kleborate.txt_ext}"
        ]
    }

    withName: SPATYPER {
        ext.parameters = params.spatyper
        stageInMode = params.stage_in_mode
        //scratch = false
        publishDir = [
            path: { "${params.outdir}/subtyping/spatyper" },
            mode: params.publish_dir_mode,
            pattern: "*${params.spatyper.tsv_ext}"
        ]
    }


    withName: SISTR {
        //container = params.sistr.container
        ext.parameters = params.sistr
        stageInMode = params.stage_in_mode
        //scratch = false
        publishDir = [
            path: { "${params.outdir}/subtyping/sistr" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: LISSERO {
        //container = params.lissero.container
        ext.parameters = params.lissero
        stageInMode = params.stage_in_mode
        //scratch = false
        publishDir = [
            path: { "${params.outdir}/subtyping/lissero" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: SHIGEIFINDER {
        ext.parameters = params.shigeifinder
        stageInMode = params.stage_in_mode
        scratch = false
        publishDir = [
            path: { "${params.outdir}/subtyping/shigeifinder" },
            mode: params.publish_dir_mode,
        ]
    }


    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }


}
